---
title: Adding Users
slug: adding-users
date: 0006/01/01
number: 6
contents: Learn about user accounts in Meteor.|Add all the authentication we'll need for Microscope.|Use the built-in accounts-ui package to get an instant user interface.
paragraphs: 27
---

So far, we've managed to create and display some static fixture data in a sensible fashion
and wire it together into a simple prototype. 
ここまでで、私たちは（sensible fashion＝実用的な方法？）で静的な固定データを作って表示しました。
そして、（ simple prototype？）に結びつけました。（？？？）

We've even seen how our UI is responsive to changes in the data, and inserted or changed data appears immediately.
Still, our site is hamstrung by the fact that we can't enter data. In fact, we don't even have users yet!
さらに、どのように UI がデータが変化に反応するのかを見てきました。
、挿入されたり、変化したデータが瞬時に現れるのか見てきました。
しかし、このサイトはデータを入力できないので骨抜きとなっています。実はまだユーザーもいないのです！

Let's see how we can fix that.
では、どのようにこの点を修正していくのか見ていきましょう。

### Accounts: users made simple 

In most web frameworks, adding user accounts is a familiar drag. 
Sure, you have to do it on almost every project, 
but it's never as easy as it could be.
What's more, as soon as you have to deal with OAuth or other 3rd party authentication schemes, 
things tend to get ugly fast.
ほとんどのウェブフレームワークでは、ユーザーアカウントを付け加えることは（familiar drag？）です。
たしかに、すべてのプロジェクトでやらなければなりませんが、簡単なことではありません。
さらには、OAuth やサードパーティの認証スキームを出来る限り早く使えるようにならなくてはなりません。
世の中は嫌になるほど速く進みます。

Luckily, Meteor has you covered. 
Thanks to the way Meteor packages can contribute code on both the server (JavaScript) and client 
(JavaScript, HTML, and CSS) side, 
we can get an accounts system almost for free.
幸運なことに、Meteorはこの点も肩代わりしてくれます。
Meteor package が　コードがサーバー（ JavaScript ）とクライアント（ JavaScript と HTML と CSS ）の両方で（ contribute code？ ）できるおかげで、
私たちはほぼ無料でアカウントシステムを使うことができます。

We could just use Meteor's built-in UI for accounts 
(with meteor add accounts-ui) 
but since we've built our whole app with Bootstrap, 
we'll use the accounts-ui-bootstrap-dropdown package instead
(don't worry, the only difference is the styling). 
On the command line, we type:
 meteor add accounts-ui で Meteor に組み込まれたアカウントの UI を使うことができますが、
ここでは Bootstrap を使ってアプリを作るので、
accounts-ui-bootstrap-dropdown を使います。
（違いはスタイリングだけなのでご心配なく）
コマンドライン上で、このようにタイピングしてください。

~~~bash
$ meteor add mrt:accounts-ui-bootstrap-dropdown
$ meteor add accounts-password
~~~
<%= caption "Terminal" %>

Those two commands make the special accounts templates available to us;
we can include them in our site using the {{> loginButtons}} helper. 
A handy tip: you can control on which side your log-in dropdown shows up using the align attribute 
(for example: {{> loginButtons align="right"}}).
この２つのコマンドで私たちは特別なアカウントテンプレートを使うことができます；
{{> loginButtons}} ヘルパーを使うことで、サイトに（ them？）をインクルードすることができます。
ちょっとしたヒント：align 属性を使うことでログインのドロップダウンの表示をコントロールすることができます。
(たとえば: {{> loginButtons align="right"}}).

We'll add the buttons to our header.
And since that header is starting to grow larger,
let's give it more room in its own template (we'll put it in client/views/includes/).
We're also using some extra markup and Bootstrap classes to make sure everything looks nice:
では、ヘッダーにボタンを追加しましょう。
ヘッダーが大きくなってきているので、　
テンプレート内に（give it more room？）しましょう。（client/views/includes/の中に入れます。）
私たちは（extra？）マークアップや Bootstrap クラスをサイトの外観を良くするために使っていきます。

~~~html
<template name="layout">
  <div class="container">
    {{>header}}
    <div id="main" class="row-fluid">
      {{yield}}
    </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>
<%= highlight "6" %>

~~~html
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
      <div class="nav-collapse collapse">
        <ul class="nav pull-right">
          <li>{{loginButtons}}</li>
        </ul>
      </div>
    </div>
  </header>
</template>
~~~
<%= caption "client/views/includes/header.html" %>

Now, when we browse to our app, we see the accounts login buttons in the top right hand corner of our site.
さて、アプリを見てみるとサイトの右上にアカウントログインボタンがあるのがわかります。

<%= screenshot "6-1", "Meteor's built-in accounts UI" %>

We can use these to sign up, log in, request a change of password, 
and everything else that a simple site needs for password-based accounts.
これでサインアップやログイン、パスワード変更のリクエスト、その他すべてのことを使うことができます。
シンプルなサイトで必要となるパスワードを元にしたアカウント（？？？）

To tell our accounts system that we want users to log-in via a username, 
we simply add an Accounts.ui config block in a new config.js file inside client/helpers/:
アカウントシステムに私たちがユーザーがユーザーネームを使ってログインをさせたいと命令するために、client/helpers/ の中の config.js ファイルに Accounts.ui コンフィグブロックを入れます。

~~~js
Accounts.ui.config({
  passwordSignupFields: 'USERNAME_ONLY'
});
~~~
<%= caption "client/helpers/config.js" %>

<%= commit "6-1", "Added accounts and added template to the header" %>

### Creating Our First User　　一人目のユーザーを作る

Go ahead and sign up for an account: 
the "Sign in" button will change to show your username. 
This confirms that a user account has been created for you. 
But where is that user account data coming from?
先に進んでアカウントのサインアップをします：
すると、「サインイン」ボタンは変化してユーザーネームを表示します。
これであなたのユーザーアカウントが作られたことが確認できます。
しかし、ユーザーアカウントのデータはどこから来たのでしょうか。

By adding the accounts package, Meteor has created a special new collection,
which can be accessed at Meteor.users.
To see it, open your browser console and type:
アカウントパッケージを入れたことで、Meteor は新たに Meteor.users でアクセスできる特別なコレクションを作ります。
これを見るために、プラウザコンソールでこのように入力しましょう。

~~~js
❯ Meteor.users.findOne();
~~~
<%= caption "Browser console" %>

The console should return an object representing your user object;
if you take a look, you can see that your username is in there, as well as an _id that uniquely identifies you. 
Note that you can also get the currently logged-in user with Meteor.user().
コンソールはユーザーオブジェクトを意味しているオブジェクトを返します。
見てみると、ユーザーネームとあなただけを識別する _id がそこにあるのがわかります。　
また、Meteor.user() を使って、現在ログインしているユーザー情報を得ることができます。

Now log out and sign up again with a different username. 
Meteor.user() should now return a second user. But wait, let's run:
それではログアウトをして、次は違うユーザーネームでサインアップしてみます。
Meteor.user() は現在では２人のユーザーを返すことでしょう。
実行してみます：

~~~js
❯ Meteor.users.find().count();
1
~~~
<%= caption "Browser console" %>

The console returns 1. Hold on, shouldn't that be 2? 
Has the first user been deleted? 
If you try logging in as that first user again, you'll see that's not the case.
コンソールは１を返しました。ちょっと待って、２じゃないの？（？？？）
最初のユーザーは削除されたのでしょうか？
再び最初のユーザーでログインしてみると、ユーザーが削除されていないことがわかるでしょう。

Let's make sure and check in the canonical data-store, the Mongo database.
We'll log into Mongo (meteor mongo in your terminal) and check:
（canonical＝標準的な？）なデータストア、MongoDB の中をチェックしていきましょう。
ターミナルで meteor mongo と入力して MongoDB にログインして、チェックしましょう。

~~~bash
> db.users.count()
2
~~~
<%= caption "Mongo console" %>

There are definitely two users. So why can we only see a single one at a time in the browser?
間違いなく２人のユーザーがいます。ではなぜブラウザーでは１人だけしかいなかったのでしょうか？

### A Mystery Publication!　　パブリケーションのミステリー！

If you think back to Chapter 4, you might remember that by turning off autopublish, 
we stopped collections from automatically sending all the data
from the server into each connected client's local version of the collection.
We needed to create a publication and subscription pair to channel the data across.
４章を振り返ると、autopublish を停止させたことを思えているでしょう。
コレクションがクライアントの（local version of the collection？）とつながって
サーバーから自動的にすべてのデータを送信することを阻止しました。
私たちは（pair to channel the data across？）するパブリケーションとサブスクリプションを作る必要がありました。（？？？）　　

Yet we never set up any kind of user publication. So how come we can even see any user data at all?
私たちはまだユーザーパブリケーションについて何も設定していません。ではどうして私たちはユーザーデータを見ることができるのでしょうか。

The answer is that the accounts package 
actually does "auto-publish" the currently logged in user's basic account details no matter what. 
If it didn't, then that user could never log in to the site!
その答えはアカウントパッケージが現在ログインしているユーザーの基本的なアカウントの詳細を "auto-publish" をするからです。
そうでないとしたら、ユーザーはこのサイトにログインすることができません！

The accounts package only publishes the current user though.
This explains why one user can't see another's account details.
しかし、アカウントパッケージは現在のユーザーだけをパブリッシュします。
そうした理由で、ユーザーは他のユーザーのアカウントの詳細を見ることができないです。

So the publication is only publishing one user object per logged-in user (and none when you are not logged in).
　パブリケーションはログインユーザーごとに一人のユーザーオブジェクトをパブリッシュしています。
　（ログインしていない時はなにもありません。）

What's more, documents in our user collection don't seem to contain the same fields on the server and on the client.
In Mongo, a user has a lot of data in it. To see it, just go back to your Mongo terminal and type:
さらには、ユーザーコレクション内のドキュメントはサーバーとクライアントで同じフィールドを含んでいないようです。　
MongoDB では、ユーザーは多くのデータを（has＝保存して？）います。それを見るために、Mongo ターミナルに戻って、このように入力します：

~~~bash
> db.users.findOne()
{
  "createdAt" : 1365649830922,
  "_id" : "kYdBd9hr3fWPGPcii",
  "services" : {
    "password" : {
      "srp" : {
        "identity" : "qyFCnw4MmRbmGyBdN",
        "salt" : "YcBjRa7ArXn5tdCdE",
        "verifier" : "df2c001edadf4e475e703fa8cd093abd4b63afccbca48fad1d2a0986ff2bcfba920d3f122d358c4af0c287f8eaf9690a2c7e376d701ab2fe1acd53a5bc3e843905d5dcaf2f1c47c25bf5dd87764d1f58c8c01e4539872a9765d2b27c700dcdedadf5ac82521467356d3f91dbeaf9848158987c6d359c5423e6b9cabf34fa0b45"
      }
    },
    "resume" : {
      "loginTokens" : [
        {
          "token" : "BMHipQqjfLoPz7gru",
          "when" : 1365649830922
        }
      ]
    }
  },
  "username" : "tmeasday"
}
~~~
<%= caption "Mongo console" %>

On the other hand, in the browser the user object is much more pared down,
as you can see by typing the equivalent command:
一方で、ブラウザーでユーザーオブジェクトはかなり少なくなっています。
同じコマンドを入力して見ることができます。

~~~js
❯ Meteor.users.findOne();
Object {_id: "kYdBd9hr3fWPGPcii", username: "tmeasday"}
~~~
<%= caption "Browser console" %>

This example shows us how a local collection can be a secure subset of the real database. 
The logged-in user only sees enough of the real dataset to get the job done (in this case, signing in).
This is a useful pattern to learn from, as you'll see later on.
この例では、どのようにローカルのコレクションが実際のデータベースの（secure subset？）になるのかを表しています。
ログインユーザーはサインインをするためには十分な実際のデータベースだけを見ています。
これは今後見ていくことを学ぶ上で役に立つパターンです、　

That doesn't mean you can't make more user data public if you want to. 
You can refer to the Meteor docs to see how to optionally publish more fields in the Meteor.users collection.
これはあなたがさらにユーザーデータをパブリック（？？？）にできないという意味ではありません。
どのようにして Meteor.users コレクション内でフィールドを選択してパブリッシュするのかを見るのかを見る場合は、Meteor docs を参照すると良いでしょう。
