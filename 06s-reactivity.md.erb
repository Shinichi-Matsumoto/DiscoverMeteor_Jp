---
title: Reactivity
slug: reactivity
date: 0006/01/02
number: 6.5
sidebar: true
contents: Learn about Meteor's reactive code dependency system.|Understand the motivations and how it makes code declarative.|Learn to use advanced code that uses reactive data.
paragraphs: 20
---

If collections are Meteor's core feature, then reactivity is the shell that makes that core useful.
コレクションがMeteorのコアな機能だとすると、リアクティビリティは　そのコアを　便利にする（ shell？）です。

Collections radically transform the way your application deals with data changes.
Rather than having to check for data changes manually (e.g. through an AJAX call)
and then patch those changes into your HTML,
data changes can instead come in at any time and get applied to your user interface seamlessly by Meteor.
コレクションは　データの変化を処理するアプリケーションの（ way？）を　（radically？）に　（transform？）します。
たとえば、AJAXなどで人力でデータの変化をチェックして、
HTMLにその変化をパッチするよりも、
Meteorによって、データの変化がどんなときでも（ come in？）して、シームレスにユーザーインターフェースに適用することができます。

Take a moment to think it through: behind the scenes, 
Meteor is able to change any part of your user interface when an underlying collection is updated.
少し時間をとってこの点を考えてみます：
（underlying？）なコレクションが更新されると、Meteorは裏側でどんなユーザーインターフェースのパーツでも変化させます。　

The imperative way to do this would be to use .observe(),
a cursor function that fires callbacks when documents matching that cursor change. 
We could then make changes to the DOM (the rendered HTML of our webpage) through those callbacks. 
The resulting code would look something like this:
これをするために必須な（way?）は、 .observe()を使うことです。
.observe()はドキュメントがカーソルの変化にマッチした時に　コールバックを（fiew?）する　カーソル関数です。　

~~~js
Posts.find().observe({
  added: function(post) {
    // when 'added' callback fires, add HTML element
    $('ul').append('<li id="' + post._id + '">' + post.title + '</li>');
  },
  changed: function(post) {
    // when 'changed' callback fires, modify HTML element's text
    $('ul li#' + post._id).text(post.title);
  },
  removed: function(post) {
    // when 'removed' callback fires, remove HTML element
    $('ul li#' + post._id).remove();
  }
});
~~~

You can probably already see how such code is going to get complex pretty quickly.
Imagine dealing with changes to each attribute of the post, and having to change complex HTML within the post's <li>.
Not to mention all the complicated edge cases that can come out 
when we start relying on multiple sources of information that can all change in realtime.
こうしたコードが　どのようにして　（pretty quickly？）に　複雑化するのか　すでに分かっているかもしれません。
投稿ごとの属性の変化を処理すると想定すると、投稿の <li>内の複雑なHTMLを変化する必要があります。
（？？？）、（？？？？？？）

<% note do %>

### When *Should* We Use `observe()`?

Using the above pattern is sometimes necessary, especially when dealing with third-party widgets.
For example, let's imagine we want to add or remove pins on a map in real time based on Collection data
(say, to show the locations of currently logged in users).
上記のパターンを使うことは特に、サードパーティーのウィジットを(dealing with？)する時に必要となります。
たとえば、コレクションデータに基づいたリアルタイムなマップのピンを加えるか削除すると考えてみましょう。　　

In such cases, you'll need to use observe() callbacks in order to get the map to "talk" with
the Meteor collection and know how to react to data changes.
For example, you would rely on the added and removed callbacks to call the map API's own dropPin()
or removePin() methods.
その場合、Meteorコレクションと（ get the map to "talk" with？）して、
データの変化の反応を見分けるために、　observe()コールバックを使う必要があります。 
一例をあげると、マップ API のdropPin() や removePin()メソッドを呼び出すために　addedとremoved コールバックを使うことになります。

<% end %>

### A Declarative Approach

Meteor provides us with a better way: reactivity, which is at its core a declarative approach. 
Being declarative lets us define the relationship between objects once and know they'll be kept in sync,
instead of having to specify behaviors for every possible change.
Meteorではより良い方法が用意されています。　宣言型アプローチである　リアクティビリティです。
宣言型であることで、（specify behaviors for every possible change？）する代わりに
（once？）オブジェクト間の　関係を定義でき、同期されていることを（ know ？）できます。

This is a powerful concept, because a realtime system has many inputs that can all change at unpredictable times.
By declaratively stating how we render HTML based on whatever reactive data sources we care about, 
Meteor can take care of the job of monitoring those sources and transparently take on the messy job 
of keeping the user interface up to date.
これはパワフルなコンセプトです。（？？？）
なぜなら、リアルタイムシステムには　予期できない時にすべて変化できる　多くの入力データがあるからです。。

All this to say that instead of thinking about observe callbacks, Meteor lets us write:
observeコールバックについて考える代わりに（　All this to say ？）、 Meteorでこのように書くことができます：

~~~html
<template name="postsList">
  <ul>
    {{#each posts}}
      <li>{{title}}</li>
    {{/each}}
  </ul>
</template>
~~~

And then get our list of posts with:
その後で、このようにして投稿リストを呼んできます：

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
~~~

Behind the scenes, Meteor is wiring up observe() callbacks for us,
and re-drawing the relevant sections of HTML when the reactive data changes.
裏側で、Meteorはobserve()コールバックにつないています。
また、　リアクティブデータが変化すると　関係のあるHTMLのセッションを再び取り出しています。（？？？）

### Dependency Tracking in Meteor: Computations

While Meteor is a real-time, reactive framework, not all of the code inside a Meteor app is reactive. 
If this were the case, your whole app would re-run every time anything changed.
Instead, reactivity is limited to specific areas of your code, and we call these areas computations.
Meteorはリアルタイムでリアクティブなフレームワークですが、Meteorアプリの中の全てのコードがリアクティブというわけではありません。
この場合では、　何かが変わる度にアプリ全体が再実行することでしょう。（？？？）
その代わりに、リアクティビリティはコードの特定の範囲を制限されています。　
私たちはその範囲をコンピュテーションと呼んでいます。

In other words, a computation is a block of code that runs 
every time one of the reactive data sources it depends on changes. 
If you have a reactive data source (for example, a Session variable) and would like to respond reactively to it, 
you'll need to set up a computation for it.
コンピュテーションは　変化によってリアクティブデータソースを毎回実行しているコードのブロックです。（？？？）
たとえば、セッション変数　リアクティブデータソースを（have？）して　リアクティブに（ to it？）に反応したいとすると、
コンピュテーションを設定する必要があります。

Note that you usually don't need to do this explicitly 
because Meteor already gives each template it renders its own special computation 
(meaning that code in template helpers and callbacks is reactive by default).
しっかりとこの設定をする必要はありません。
というのは、Meteorがすでに　各テンプレートに　（special？）なコンピュテーションをレンダリングしているからです。
（　テンプレートヘルパー内のコードとコールバックは初期設定でリアクティブであるということ意味しています。）（？？？）

Every reactive data source tracks all the computations
that are using it so that it can let them know when its own value changes.
To do so, it calls the invalidate() function on the computation.
リアクティブデータソースは　いつその値が変化するか知らせることができるように（it？）を使って
すべてのコンピュテーションをトラッキングします。
そうするために、（ it？）はコンピュテーションで　invalidate()関数を呼び出します。

Computations are generally set up to simply re-evaluate their contents on invalidation,
and this is what happens to the template computations 
(although template computations also do some magic to try and redraw the page more efficiently).
Although you can have more control on what your computation does on invalidation if you need to,
in practice this is almost always the behavior you'll be using.
コンピュテーションは　

### Setting Up a Computation

////

~~~js
Deps.autorun(function() {
  console.log('There are ' + Posts.find().count() + ' posts');
});
~~~

////

~~~js
> Posts.insert({title: 'New Post'});
There are 4 posts.
~~~

////
