---
title: Collections
slug: collections
date: 0004/01/01
number: 4
contents: Meteorの基本的な機能であるリアルタイムコレクションについて学ぶ。|どのようにMeteorのデータが同期するのか理解する。|コレクションをテンプレートと一体化させる。（？？？）|ここまでで作った試作品をリアルタイムで動くアプリにする！
paragraphs: 72
---

In chapter one, we spoke about the core feature of Meteor, 
the automatic synchronisation of data between client and server.
　１章では、クライアントとサーバー間のデータを自動的に同期させる Meteor の特徴についてお話しました。

In this chapter, we'll take a closer look at how that works, 
and observe the operation of the key piece of technology that enables this, the Meteor Collection.
　この章では、これがどのように動いているのかもう少し詳しく見ていき、
　データの自動同期を実現させる上で鍵となる Meteor コレクションについて見ていきます。

We are building a social news app, 
so the first thing we want to do is make a list of links that people have posted. 
We'll call each of these items a "post."
　私たちはソーシャルニュースアプリを作っているので、最初にやりたいことは投稿されたリンクの一覧表を作ることです。
　投稿されたリンクのことは "post" と呼ぶことにしましょう。

Naturally, we need to store these posts somewhere.
Meteor comes bundled with a Mongo database which runs on your server 
and is your persistent data store.
　当然ながら、投稿をどこかに格納しなければなりません。
　Meteor は MongoDB とセットになっています。
　MongoDB はサーバー上で動き、永続的にデータを保存します。

So, although a user's browser may contain some kind of state 
(for instance which page they are on, or the comment they are currently typing), 
the server, and specifically Mongo, contains the permanent, 
canonical data source.
 By canonical, we mean that it is the same for all users:
each user might be on a different page, 
but the master list of posts is the same for all.
　ユーザーのブラウザがどのようなページを開いているのか、
　現在コメントを書いているかといったさまざまな状態がありますが、
　特に Mongo のサーバーは永続的で標準的なデータソースを保存します。
（？？？）
　
This data is stored in Meteor in the Collection. 
A collection is a special data structure that, 
through publications and subscriptions, 
takes care of synchronising real-time data to and from each connected user's browser and into the Mongo database.
Let's see how.
　データは Meteor のコレクションの中に保存されます。
　コレクションは特別なデータ構造で、　　　
　パブリケーションとサブスクリプションを使って同期しているリアルタイムデータつながったユーザーのブラウザから    MongoDB内に　（？？？？？？）
どうなるのか見て行きましょう。

We want our posts to be permanent and shared between users, 
so we'll start by creating a collection called Posts to store them in. 
If you haven't done so already create a collections/ folder 
at the root of your app, and then a posts.js file inside it. 
Then add:
　　私たちは投稿データを永続化してユーザー間と共有したいので、投稿データを格納する Posts コレクションを作るところから始めます。
まだ　アプリの root で collections/ フォルダーに posts.js ファイルを入れます。
そして次のように書き込みます。

~~~js
Posts = new Meteor.Collection('posts');
~~~
<%= caption "collections/posts.js" %>

<%= commit "4-1", "postsコレクションを加える" %>

Code inside folders that are not client/ or server/ will run in both contexts. 
So the Posts collection is available to both client and server. 
However, what the collection does in each environment is very different.
 client/ でも server/ でもないフォルダのコードは、クライアントとサーバーの両方で動きます。
　そのため、 Postsコレクションはクライアントとサーバーで動きます。
　しかし、コレクションがクライアントとサーバーで行うことは大きく異なります。

<% note do %>

### Varを使うか使わないか？　（？？？）

In Meteor, the var keyword limits the scope of an object to the current file. 
Here, we want to make the Posts collection available to our whole app, 
which is why we're not using the var keyword.
　Meteorでは、var というキーワードは現在のファイルでオブジェクトのスコープを限定します。
　ここで私たちはアプリ全体で使える Posts コレクションを作りたいので、var という用　語を使っていないというわけです。

<% end %>

On the server, the collection has the job of talking to the Mongo database, 
and reading and writing any changes. 
In this sense, it can be compared to a standard database library. 
On the client however, 
the collection is a secure copy of a subset of the real, canonical collection. 
The client-side collection is constantly 
and (mostly) transparently kept up to date with that subset in real-time.
 サーバーでのコレクションは MongoDB と通信して、あらゆる変化を読み書きする役目を果たします。（？？？）
　この意味で通常のデータベースライブラリと比較できます。（？？？）
　一方で、クライアントでのコレクションは　（  subset of the real？）の正確なコピーで、標準的なコレクションです。
　クライアントサイドのコレクションはユーザーが意識することなく 絶えずリアルタイムで最新情報を処理します。

<% note do %>

### Console vs Console vs Console

In this chapter, we'll start making use of the browser console, 
which is not to be confused with the terminal or the Mongo shell. 
Here's a quick primer on each of them.
　この章では、ブラウザのコンソールを使っていきます。
　これはターミナルや Mongo シェルとは違います。
　ここでは、そのあたりについてざっくりと解説していきます。（？？？）

#### ターミナル

<%= screenshot "terminal", "The Terminal" %>

Called from your operating system.
Server-side console.log() calls output here.
Prompt: $.
Also known as: Shell, Bash
　- オペレーティングシステムから呼び出される。
　- サーバーサイドのconsole.log()は、ここに出力される。
　- プロンプト：$
　- 別名：Shell、Bash

#### ブラウザコンソール

<%= screenshot "browser-console", "The Browser Console" %>

Called from inside the browser, executes JavaScript code.
Client-side console.log() calls output here.
Prompt: ❯.
Also known as: JavaScript Console, DevTools Console
　- ブラウザで JavaScript のコードを実行する。
　- クライアントサイドの console.log() をここに出力する。
　- プロンプト： ❯
　- 別名：JavaScript Console、DevTools Console

#### Mongoシェル

<%= screenshot "mongo-shell", "The Mongo Shell" %>

Called from the Terminal with meteor mongo.
Gives you direct access to your app's database.
Prompt: >.
Also know as: Mongo Console
　- meteor mongo を使って、ターミナルから呼び出される。
　- 作っているアプリのデータベースに直接アクセスできる。
　- プロンプト：>
　- 別名：Mongoコンソール

Note that in each case, 
you're not supposed to type the prompt character ($, ❯, or >) 
as part of the command. 
And you can assume that any line not beginning with the prompt is the output of the preceding command.
　ここで留意すべきことは、$・❯・>といったプロンプト文字をコマンドで入力しなくて良いということです。
　プロンプトより先の文字で始まっていないものは、それより先に行ってたコマンドが出力したものと見なすことができます。

<% end %>

###サーバーサイドのコレクション

On the server, the collection acts as an API into your Mongo database. 
In your server-side code, 
this allows you to write Mongo commands like Posts.insert() or Posts.update(), and they will make changes to the posts collection stored inside Mongo.
　サーバーでのコレクションは MongoDB の API のような役割を果たします。
　サーバーサイドのコードで　Posts.insert() や Posts.update() のようなMongoコマンドを書くことができます。
　すると、MongoDB 内に格納されている posts コレクションは変化します。

To look inside the Mongo database,
 open up a second terminal window (while meteor is still running in your first), and go to your app's directory. 
Then, run the command meteor mongo to initiate a Mongo shell,
 into which you can type standard Mongo commands 
(and as usual, you can quit it with the ctrl+c keyboard shortcut). 
For example, let's insert a new post:
　MongoDB 内を見るために、２つ目のターミナルウィンドウをを開きます。（１つ目のターミナルではまだ meteor が動いている状態です。）
　そうしたら、アプリのディレクトリへ行きましょう。
　そして、Mongo シェルを起動するために meteor mongo コマンドを実行します。
　Mongo シェルでは、通常の Mongo コマンドを入力することができます。
　（また、いつものように ctrl+c で停止することができます。）
　例として、新しい投稿を挿入しましょう。

~~~bash
> db.posts.insert({title: "A new post"});

> db.posts.find();
{ "_id": ObjectId(".."), "title" : "A new post"};
~~~
<%= caption "The Mongo Shell" %>

<% note do %>

### Mongo on Meteor.com　（？？？）

Note that when hosting your app on *.meteor.com, you can also access your deployed app's Mongo shell with meteor mongo myApp.
　meteor.com にアプリをホスティングする際は、meteor mongo myAppと入力することでデプロイされたアプリのMongoシェルにアクセスすることができます。

And while we're at it, you can also get your app's logs by typing meteor logs myApp.
　さらに、その状態で meteor logs myApp と入力すること、アプリのログを見ることができます。

<% end %>

Mongo's syntax is familiar, as it uses a JavaScript interface. 
We won't be doing any further data manipulation in the Mongo shell, 
but we might take a peek inside from time to time 
just to make sure what's in there.
　MongoDB の構文は、JavaScript インターフェースを使っているため、親しみやすくなっています。
　私たちはこれ以上 Mongoシェルでデータ操作をしませんが、MongoDB内に何があるのか確認するために時々のぞき見をするかもしれません。

### クライアントサイドのコレクション

Collections get more interesting client-side. 
When you declare Posts = new Meteor.Collection('posts'); on the client, 
what you are creating is a local, in-browser cache of the real Mongo collection. When we talk about a client-side collection being a "cache", 
we mean it in the sense that it contains a subset of your data, 
and offers very quick access to this data.
　コレクションはクライアントサイドでは、より面白くなってきます。
　クライアントで Posts = new Meteor.Collection('posts'); と宣言すると、作っているものはローカルで、 Mongoコレクションの　( in-browser ?)のキャッシュ（？？？）
　クライアントサイドのコレクションで「キャッシュ」という場合、（it ？）がデータの一部分を保持して、データへのアクセスを高速化させるキャッシュのことを意味しています。

It's important to understand this point 
as it's fundamental to the way Meteor works. 
In general, 
a client side collection consists of a subset of all the documents stored 
in the Mongo collection 
(after all, we generally don't want to send our whole database to the client).
　この点を理解することは大事なことです。
　というのは、これが Meteor が動作する方法の基本だからです。
　一般的に、クライアントサイドのコレクションは Mongo コレクションに格納されているすべてのドキュメントの一部分から構成されます。
　（結局のところ、私たちはすべてのデータベースをクライアントに送りたいわけではありません。）

Secondly, those documents are stored in browser memory, 
which means that accessing them is basically instantaneous. 
So there are no slow trips to the server or the database to fetch the data 
when you call Posts.find() on the client, as the data is already pre-loaded.
　次に、こうしたドキュメントはブラウザのメモリに保存されているので、このドキュメントには基本的に一瞬でアクセスするということを意味しています。
　つまり、データを取ってくるためにクライアントで Posts.find() を呼び出す際、データは事前に読み込まれているのでサーバーやデータベースへのアクセスは速いのです。

<% note do %>

### Introducing MiniMongo

Meteor's client-side Mongo implementation is called MiniMongo. 
It's not a perfect implementation yet, 
and you may encounter occasional Mongo features that don't work in　MiniMongo. 
Nevertheless, all the features we cover in this book work similarly 
in both Mongo and MiniMongo.
　Meteor のクライアントサイドでの実装は MiniMongo と呼ばれます。
　まだ完全な実装ではないので（？？？）、通常の MongoDB の機能が MiniMongo で動かないことがあるかもしれません。
　とはいえ、本書でカバーしているすべての機能は MongoDB と MiniMongo で同じように動きます。
 
<% end %>

### クライアントとサーバーの通信

The key piece of all this is how the client-side collection synchronizes its data with the server-side collection of the same name ('posts' in our case).
　ここで重要な点は、どのようにクライアントサイドのコレクションが同じ名前のサーバーサイドのコレクションと同期するのかということです。（この場合では、'posts'）

Rather than explaining this in detail, let's just watch what happens.
　この点は詳細に説明するよりも、実際に何が起こるのか見る方が良いでしょう。

Start by opening up two browser windows, 
and accessing the browser console in each one. 
Then, open up the Mongo shell on the command line. 
At this point, we should see the single document 
we created earlier in all three contexts.
　まず２つのブラウザウィンドウを開いて、両方でブラウザコンソールにアクセスしましょう。
　それから、コマンドラインで Mongo シェルを開きます。
　現段階では、先ほど作った１つのドキュメントがあります。　　（？？？）

~~~bash
> db.posts.find();
{title: "A new post", _id: ObjectId("..")};
~~~
<%= caption "The Mongo Shell" %>

~~~js
❯ Posts.findOne();
{title: "A new post", _id: LocalCollection._ObjectID};
~~~
<%= caption "First browser console" %>

Let's create a new post. In one of the browser windows, 
run an insert command:
　新しい投稿を作りましょう。
　ブラウザウィンドウの一つで、insert コマンドを実行します。

~~~js
❯ Posts.find().count();
1
❯ Posts.insert({title: "A second post"});
'xxx'
❯ Posts.find().count();
2
~~~
<%= caption "First browser console" %>

Unsurprisingly, the post made it into the local collection. 
Now let's check Mongo:
当然のように、投稿はローカルのコレクションに作られました。
Mongo をチェックしましょう。

~~~bash
❯ db.posts.find();
{title: "A new post", _id: ObjectId("..")};
{title: "A second post", _id: 'yyy'};
~~~
<%= caption "The Mongo Shell" %>

As you can see, the post made it all the way back to the Mongo database, without us writing a single line of code to hook our client up to the server 
(well, strictly speaking, we did write a single line of code: 
new Meteor.Collection('posts')). But that's not all!
ご覧のように、この投稿はクライアントとサーバーをフックするための一行もコードを書くことなく、すべてのMongoDBをさかのぼります。（？？？）
（厳密に言うと、私たちは new Meteor.Collection('posts') という一行のコードを書きました。）
しかし、話はここで終わりません。

Bring up the second browser window and enter this in the browser console:
　２つのブラウザーウィンドウを立ち上げて、ブラウザーコンソールに次のように入力します：

~~~js
❯ Posts.find().count();
2
~~~
<%= caption "Second browser console" %>

The post is there too! 
Even though we never refreshed or even interacted with the second browser, 
and we certainly didn't write any code to push updates out. 
It all happened magically -- and instantly too, 
although this will become more obvious later.
　その投稿もここにあります！（？？？）
　私たちは更新もせず、
　２つ目のブラウザーと情報をやりとりもしていないのにもせず、
　更新情報を転送するコードも書いていません。（？？？）
　魔法のように一瞬にして、このことが起こります。（？？？）
　この点は、章を進めるにつれ理解できるようになります。

What happened is that our server-side collection was informed 
by a client collection of a new post, 
and took on the task of distributing that post into 
the Mongo database and back out to all the other connected post collections.
ここで何が起こったかというと、サーバーサイドのコレクションが新しい投稿のクライアントのコレクションに　 （was informed ？）され、MongoDBの投稿を（distributing？）する役割を引き受けて、関係するすべての post コレクションに送り返しています。

Fetching posts on the browser console isn't that useful. 
We will learn how to wire this data into our templates, 
and in the process turn our simple HTML prototype 
into a functioning realtime web application.
　ブラウザーコンソールで投稿を取ってくることはそれほど役立ちません。
　私たちはこのデータをテンプレートとつなげる方法を学んでいきます。
　その過程で、シンプルで（prototype＝原始的な？） HTML を機能的なリアルタイムウェブアプリケーションにする方法を学びます。

### Keeping it Real-time

Looking at the contents of our Collections on the browser console is one thing, but what we'd really like to do is display the data, and the changes to that data, on the screen.
In doing so we'll turn our app from a simple web page displaying static data, to a realtime web application with dynamic, changing data.
　ブラウザーコンソールで　コレクションの中には　１つの（？？？）　がありますが、
　ここでやりたいことはスクリーン上でデータを表示して、そのデータの変化を表示することです。
　そのようにするため、私たちが作ってきた静的データを表示する単純なウェブページのアプリを、動的にデータを変更するリアルタイムウェブアプリにしていきます。

Let's find out how.
　どうやるのか、見ていきましょう。

### Populating the Database 　データベースにデータを追加する

The first thing we'll do is put some data into the database. 
We'll do so with a fixture file that loads a set of structured data into the Posts collection when the server first starts up.
　最初にデータベースにデータを入れます。
　サーバーを立ち上げる時に　Posts コレクションに構造化データを読み込む固定ファイルを処理します。

First, let's make sure there's nothing in the database. 
We'll use meteor reset, which erases your database and resets your project. 
Of course, you'll want to be very careful with this command 
once you start working on real-world projects.
　まず、データベースの中が何もないようにしましょう。
　meteor reset を使うことで、データベースを削除してプロジェクトをリセットします。
　当然のことながら、あなたが実際のプロジェクトに取り組み始めたら、このコマンドに対して十分注意が必要です。

Stop the Meteor server (by pressing ctrl-c) and then, on the command line, run:
　ctrl-c を押して Meteor のサーバーを止めてから、コマンドラインで動かします。

~~~bash
$ meteor reset
~~~

The reset command completely clears out the Mongo database. 
It's a useful command in development, 
where there's a strong possibility 
of our database falling into an inconsistent state.
　リセットコマンドは MongoDB を完全に空っぽにします。
　これはデータベースが一貫性のない状態に陥る可能性が高い開発では便利なコマンドです。

Now that the database is empty, 
we can add the following code that will load up three posts 
whenever the server starts and finds the Posts collection empty:
　データベースが空になったので、次のコードを書き込みましょう。
　これでサーバーが起動して空のPostsコレクションを見つけると、３つの投稿読み込みます。

~~~js
if (Posts.find().count() === 0) {
  Posts.insert({
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  });
  
  Posts.insert({
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  });
  
  Posts.insert({
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  });
}
~~~
<%= caption "server/fixtures.js" %>

<%= commit "4-2", "Added data to the posts collection." %>

We've placed this file in the server/ directory, 
so it will never get loaded on any user's browser. 
The code will run immediately when the server starts, 
and make insert calls on the database 
to add three simple posts in our Posts collection. 
As we haven't built any data security yet, 
there's no real difference between doing this
 in a file run on the server or in the browser.
　このファイルは server/ ディレクトリにあるので、ユーザーのブラウザで読み込まれることはありません。
　このコードは、サーバーが起動すると瞬時に実行され、Posts コレクション内に３つの投稿を加えるために、データベースで insert を呼び出すようにします。（？？？）
　まだデータセキュリティの対策をしていないため、サーバー上のファイル内でこれを行うのと、ブラウザで行うのとで実質的な違いはありません。

Now run your server again with meteor, 
and these three posts will get loaded into the database.
　再び meteor でサーバーを起動すると、この３つの投稿はデータベースで読み込まれます。

### ヘルパーを使ってHTMLにデータをつなげる

Now, if we open up a browser console, 
we see all three posts loaded up into MiniMongo:
　これでブラウザーコンソールを開くと、MiniMongo 内で読み込まれた３つの投稿を見ることができます。

~~~js
❯ Posts.find().fetch();
~~~
<%= caption "Browser console" %>

To get these posts into rendered HTML, 
we can use a template helper. 
In Chapter 3 we saw how Meteor allows us to bind a data context
 to our Spacebars templates to build HTML views of simple data structures. 
We can bind in our collection data in the exact same way. 
We'll just replace our static postsData JavaScript object 
by a dynamic collection.
　この投稿をレンダリングした HTML にするためにテンプレートヘルパーを使います。
　３章では、Meteor がどのようにデータコンテキストを Spacebars テンプレートと結びつけるのか見てきました。 Spacebars テンプレートはシンプルなデータ構造の HTML 表示を作り出します。
　私たちはまさに同じような方法でコレクションデータを結びつけます。
 　静的な JavaScript の postsData オブジェクトを動的なコレクションに置き換えていきましょう。

Speaking of which, feel free to delete the postsData code at this point. 
Here's what posts_list.js should now look like:
　そういえば、この時点で postsData コードは削除しましょう。
　現在の posts_list.js は、このようにします。

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find();
  }
});
~~~
<%= caption "client/views/posts/posts_list.js" %>
<%= highlight "2~4" %>

<%= commit "4-3", "`postsList` テンプレートにコレクションを結びつけた" %>

<% note do %>

### Find と Fetch

In Meteor, find() returns a cursor, which is a reactive data source. 
When we want to log its contents, 
we can then use fetch() on that cursor to transform it into an array .
　Meteor での find() は、リアクティブデータソースであるカーソルを返します。
その中身の記録を取り出したい場合は、（ it ？）を配列に変換する fetch() を使います。　

Within an app, Meteor is smart enough to know 
how to iterate over cursors 
without having to explicitly convert them into arrays first. 
This is why you won't see fetch() that often 
in actual Meteor code (and why we didn't use it in the above example).
　アプリ内の Meteor は明示的に配列に変換することなく、カーソルを繰り返し処理することができます。　
　そのような理由で、実際の Meteor コードで fetch() を見る機会はそれほど多くないでしょう。（また、そのような理由から上記の例で fetch() を使いませんでした。）
　
<% end %>

Now, rather than pulling a list of posts as a static array from a variable, 
we return a cursor to our posts helper. 
But what does this do? 
If we go back to our browser, we see:
　ここでは、変数から静的な配列の投稿リストを呼び出すのではなく、カーソルをposts ヘルパーに返しています。
　しかし、これは何をするのでしょうか。
ブラウザに戻ると、このように表示されています：

<%= screenshot "4-3", "Using live data（？？？）　" %>

So we can clearly see 
that our {{#each}} helper has iterated over all of our Posts, 
and displayed them on the screen. 
The server-side collection pulled the posts from Mongo, 
passed them over the wire to our client-side collection, 
and our Spacebars helper passed them into the template.
　{{#each}} ヘルパーが Posts のすべてを繰り返し処理して、スクリーン上で表示していることがはっきりとわかります。
 サーバーサイドコレクション　MongoDBから投稿を呼び出して、クライアントサイドのコレクションに引き渡します。
それから、Spacebars ヘルパーがそれらをテンプレートに引き渡します。

Now, we'll take this one step further; let's add another post via the console:
さらに、もう一歩踏み込みます；コンソールからもう一つ投稿を加えましょう。

~~~js
❯ Posts.insert({
  title: 'Meteor Docs', 
  author: 'Tom Coleman', 
  url: 'http://docs.meteor.com'
});
~~~
<%= caption "Browser console" %>

Look back at the browser -- you should see this:
ブラウザーを見てみると、このようになっているはずです。

<%= screenshot "4-4", "コンソールから投稿を加える" %>

You have just seen reactivity in action for the first time. 
When we told Spacebars to iterate over the Posts.find() cursor, 
it knew how to observe that cursor for changes, 
and patch the HTML in the simplest way to display the correct data on screen.
　たった今、あなたは初めて作動中のリアクティビリティを目撃しました。
　 Spacebars に Posts.find() カーソルを繰り返し処理する命令をすると、 Spacebars はそのカーソルの変化を見つけて、スクリーン上で正しいデータを表示するために、とてもシンプルな方法で HTMLに適用します。

<% note do %>

### Inspecting DOM Changes

In this case, 
the simplest change possible was to add another <div class="post">...</div>. 
If you want to make sure this is really what happened, 
open the DOM inspector 
and select the <div> corresponding to one of the existing posts.
　この場合、最も簡単な変化の可能性はもう一つ <div class="post">...</div> を追加することでした。
　これが本当に起こったことだと確かめたい場合は、DOM inspector を開いて、投稿に対応する<div>要素を選択します。

Now, in the JavaScript console, insert another post. 
When you tab back to the inspector, you'll see an extra <div>, 
corresponding to the new post, 
but you will still have the same existing <div> selected. 
This is a useful way to tell when elements have been re-rendered 
and when they have been left alone.
　ここで、JavaScript コンソールで、もう一つの投稿を挿入します。
　DOM inspector に戻ると、新しい投稿に対応する <div> が見つかりますが、
　まだ選択されたままの同じ <div> も存在しています。
　これはいつ要素が再レンダリングしたか、いつ要素が（left alone＝そのまま？）なのか（ tell＝見分ける？）便利な方法です。
　
<% end %>

### コレクションをつなげる: パブリケーションとサブスクリプション

So far, we've had the autopublish package enabled, 
which is not intended for production applications. 
As its name indicates, 
this package simply says that each collection should be shared 
in its entirety to each connected client. 
This isn't what we really want, so let's turn it off.
　今までは、製品としてのアプリには向いていない autopublish パッケージが有効となっていました。
名前が意味しているように、autopublish パッケージは各コレクションの中のすべてをそれぞれつながったクライアントと共有させます。
 私たちはこうしたことをしたくないので、autopublish を停止させましょう。

Open a new terminal window, and type:
　新しいターミナルを開いて、次のように打ち込みます：

~~~bash
$ meteor remove autopublish
~~~

This has an instant effect. 
If you look in your browser now, 
you'll see that all our posts have disappeared! 
This is because we were relying on autopublish 
to make sure our client-side collection of posts was a mirror 
of all the posts in the database.
　これはすぐに有効化されます。
　今ブラウザーを見ると、すべての投稿が消えています！
　それは私たちが autopublish に依存していたからであり、autopublish は投稿に関するクライアントサイドのコレクションがデータベース内のすべての投稿に反映させていたからです。

Eventually we'll need to make sure 
we're only transferring the posts 
that the user actually needs to see 
(taking into account things like pagination). 
But for now, we'll just setup Posts to be published in its entirety.
　最終的には、ページネーションなどを考慮して、ユーザーが見る必要のある投稿だけを送る必要があります。
　とはいえ、今のところは Posts の全体にパブリッシュされるように設定します。

To do so, 
we create a simple publish() function that returns a cursor referencing all posts:
そうするために、 publish() 関数を作ります。publish() 関数はすべての投稿を参照するカーソルを返します。

~~~js
Meteor.publish('posts', function() {
  return Posts.find();
});
~~~
<%= caption "server/publications.js" %>

In the client, we need to subscribe to the publication. 
We'll just add the following line to main.js:
　クライアントでは、パブリケーションにサブスクライブする必要があります。
main.js に次のようにコードを追加しましょう。

~~~js
Meteor.subscribe('posts');
~~~
<%= caption "client/main.js" %>

<%= commit "4-4", "`autopublish`を削除して、基本的なパブリケーションをセットアップする。" %>

If we check the browser again, our posts are back. Phew!
再びブラウザーをチェックすると、投稿が元に戻っています。ふぅ！

### 結論

So what have we achieved? 
Well, although we don't have a user interface yet, 
what we have now is a functional web application. 
We could deploy this application to the Internet, 
and (using the browser console) start posting new stories 
and see them appear in other user's browsers all over the world.
　それで、私たちは何を達成したのでしょうか？
　ええと、まだユーザーインターフェースはありませんが、私たちが作ったものは実用的なウェブアプリケーションです。
　私たちはこのアプリケーションをインターネットにデプロイすることができます。
　また、ブラウザコンソールを使って新しい投稿をして、世界中のユーザーのブラウザに投稿を表示することができます。
　
