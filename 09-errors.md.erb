---
title: Errors
slug: errors
date: 0009/01/01
number: 9
contents: Create a better mechanism for displaying errors and messages.|Learn how to use `Template.rendered` to know when a user has seen an error.|Use a router filter to make sure errors are only seen once.
paragraphs: 31
---

Merely using the browser's standard alert() dialog to warn the user 
when there's problem with their submission
is a bit dissatisfying, and it certainly doesn't make for great UX. 
We can do better.
　投稿に問題がある時に、ユーザーに警告をするために単純にブラウザの標準的な　alert() ダイアログを使うことは少々不愉快で、素晴らしいUXに役立つわけではありません。
　この点をよりよくできます。


Instead, let's build a more versatile error reporting mechanism 
that will do a better job of telling the user what's going on without breaking up their flow.
　多目的で使えるエラーを報告する仕組みを作りましょう。
　これはユーザーのワークフローを中断することなくユーザーに何が起きているか知らせる上でより良い役割を果たします。

### Introducing Local Collections

We are going to implement a simple system which keeps track of which errors a user has seen and displays the new ones
in a "flash" area of the site.
This UX pattern is useful when we want to inform a user that something has happened without disrupting their workflow too much.
　サイトの（"flash"？）の領域でユーザーがどのエラーを見ているか把握して、
　新たにエラーを表示するシンプルなシステムを実装していきます。
　このUXパターンはユーザーのワークフローを邪魔せずに、私たちがユーザーに何かが起きていると知らせたいときに、役立ちます。

What we will create is similar to the flash messages often found in Ruby on Rails apps,
but is more subtle in that it's implemented client side and knows when a user has seen a message.
　私たちが作るものは Ruby on Rails アプリでよく見かける flash メッセージに似ていますが、
　（more subtle？）です。　（it？）はクライアントサイドで実装され、ユーザーがメッセージを見ている時を　（ know？）

To start off with, we create a collection to store our errors in.
Given that the errors are only relevant to the current session and don't need to be persistent in any way, 
we are going to do something new, and create a local collection.
What this means is that the Errors collection will only exist in the browser, 
and will make no attempt to synchronize with the server.
　まず初めに、私たちは　エラーを格納するコレクションを作ります。
　エラーはカレントセッションに関連するだけで、永続的である必要がないことを考えると、私たちは何か新しいことをして、ローカルコレクションを作っていくことになります。
　これが意味することは、Errorsコレクションはブラウザだけに機能して、サーバーとは同期しないということです。

To achieve this, we simply create the error in a client-only file, with the collection name set to null. 
We create a throwError function that simply inserts an error into our new local collection:
　このようにするために、私たちはコレクションの名前をnullに設定して、クライアントだけのファイルにエラーを作ります。
　私たちは新しいローカルコレクションにエラーを挿入するthrowError関数を作ります。

~~~js
// Local (client-only) collection
Errors = new Meteor.Collection(null);
~~~
<%= caption "client/helpers/errors.js" %>

Now that the collection has been created, we can add a throwError function which we'll call to add errors to it.
We don't need to worry about allow or deny or anything like that, as this is a local collection and will not be saved to the Mongo database.
　これでコレクションが作られたので、私たちはこのコレクションにエラーの追加を呼び出すthrowError関数を入れることができます。
　私たちは allow や deny などに気にする必要がありません。というのも、これはローカルコレクションで、MongoDBに保存されていないからです。

~~~js
throwError = function(message) {
  Errors.insert({message: message})
}
~~~
<%= caption "client/helpers/errors.js" %>

The advantage of using a local collection to store the errors is that, like all collections, 
it's reactive -- meaning we can declaratively display the errors in the same way we display any other collection data.
　エラーを格納するためにローカルコレクションを使うことの利点は、すべてのコレクションと同様に、リアクティブだからです。
つまり、私たちは他のコレクションデータを表示するのと同じように （declaratively＝宣言的に？）エラーを表示することができます。

### Displaying errors

We are going to display the errors at the top of our main layout:
　メインレイアウトの（ top of？）でエラーを表示していきます。

~~~html
<template name="layout">
  <div class="container">
    {{> header}}
    {{> errors}}
    <div id="main" class="row-fluid">
      {{yield}}
    </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>
<%= highlight "7" %>

Let's now create the errors and error templates in errors.html:
　errors.html 内に、エラーとエラーテンプレートを作りましょう：

~~~html
<template name="errors">
  <div class="errors row-fluid">
    {{#each errors}}
      {{> error}}
    {{/each}}
  </div>
</template>

<template name="error">
  <div class="alert alert-error">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    {{message}}
  </div>
</template>
~~~
<%= caption "client/views/includes/errors.html" %>

<% note do %>

### Twin Templates

You'll notice we're putting two templates in a single file. 
Up to now we've tried to adhere to a "one file, one template" convention, 
but as far as Meteor is concerned putting all our templates in a single file works just as well 
(although it would make for a very confusing main.html!).
　私たちが２つのテンプレートを１つのファイルに置いていることにお気づきでしょう。
　今まで私たちは　「１つのファイルに１つのテンプレート」という慣習を支持してきましたが、
　Meteorに関する限りでは、１つのファイルにすべてのテンプレートを置くこともできます。

In this case, since both error templates are fairly short, 
we'll make an exception and put them in the same file to make our repo a bit cleaner.
　この場合、両方のerrorテンプレートはとても短いので、
　私たちはリポジトリを少しきれいにしておくために、例外として同じファイルにerrorテンプレートを置きました。　

We just need to integrate our template helper, and we'll be good to go!
　私たちはテンプレートヘルパーをまとめる必要があり、用意ができています。

<% end %>

~~~js
Template.errors.helpers({
  errors: function() {
    return Errors.find();
  }
});
~~~
<%= caption "client/views/includes/errors.js" %>

<%= commit "9-1", "Basic error reporting." %>

### Creating errors

We now know how to display errors, but we still need to create some before we'll see anything. 
Errors are most commonly triggered by users entering new content, 
so we'll check for errors in our post creation callback, and display a message for any errors that get raised.
　私たちはエラーを表示する方法を知っていますが、（anything？）を見る前に　（ some？）を作る必要があります。
　ユーザーが新しい投稿を入れることで、エラーは最も普遍的に引き起こされるので、（ post creation？）コールバックでエラーをチェックして、（ get raised？）されたあらゆるエラーメッセージを表示します。

In addition, if we get the 302 error (which indicates that a post with the same URL already exists), 
we'll redirect the user to the existing post. 
We obtain the existing post's _id from error.details 
(remember we passed that post's _id as the third details argument of our Error class in chapter 7).
　さらに、302 error（これは　同じURLの投稿がすでに存在していることを示しています。）を（get？＝取得？）したら、
　すでに存在している投稿にユーザーをリダイレクトします。
　私たちはerror.details から　すでに存在している投稿の　_idを得ています
　（私たちが7章で（as the third  our Error class？）のdetails引数として投稿の_idを渡したことを思い出しましょう。）

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    Meteor.call('post', post, function(error, id) {
      if (error) {
        // display the error to the user
        throwError(error.reason);
        
        if (error.error === 302)
          Router.go('postPage', {_id: error.details})
      } else {
        Router.go('postPage', {_id: id});
      }
    });
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>
<%= highlight "12~14, 16~21" %>

<%= commit "9-2", "Actually use the error reporting." %>

Give it a try: try creating a post and entering the URL http://meteor.com. As this URL is already attached to a post in the fixtures, you should see:
試してましょう：http://meteor.comのURLを入力して投稿を作ってみましょう。このURLがすでに（in the fixtures？）に投稿が（attached＝存在）していたら、 このように表示されます。

<%= screenshot "9-1", "Triggering an error" %>

### Clearing Errors

If you click the error's close button at this point, 
you'll see the error disappear, because that close button triggers Twitter Bootstrap's embedded JavaScript.
　現在のところ、エラーのクローズボタンをクリックすると、エラーが消えます。
　これはクローズボタンがTwitter Bootstrapに埋め込まれた JavaScript　を引き起こすからです。

But while Bootstrap is removing the error <div> from the DOM, 
it's not removing the error object from the Meteor collection. 
So let's add a way to clean up our local collection once an error has done its job.
　しかし、Bootstrapは DOMからエラー<div>を削除しますが、
　Meteorコレクションからエラーオブジェクトを削除しません。
エラーが役割を果たしたら、ローカルコレクションをきれいにする方法を追加しましょう。


First, we'll modify the throwError function to include a seen property. 
This will be useful later on to keep track of whether an error has been actually seen by the user.
　最初に、私たちは seen プロパティを（include？＝インクルード？）するために　throwErrorエラー関数を修正します。
　これはエラーが実際にユーザーに見られたのか把握するために、後々役立ちます　

Once that's done, we can code up a simple clearErrors function that clears those "seen" errors:
　これが終わると、私たちは（"seen" ？）エラーをクリアする　clearErrors関数をコーディングします。

~~~js
// Local (client-only) collection
Errors = new Meteor.Collection(null);

throwError = function(message) {
  Errors.insert({message: message, seen: false})
}

clearErrors = function() {
  Errors.remove({seen: true});
}
~~~
<%= caption "client/helpers/errors.js" %>
<%= highlight "5,8~10" %>


Next, we'll clear errors in the router so that navigating to another page will make these errors vanish forever:
　次に、私たちは　ルーターでエラーをクリアします　（ so that？）　他のページに（navigating？）はエラーを永遠に消去するように

~~~js
// ...

Router.before(requireLogin, {only: 'postSubmit'})
Router.before(function() { clearErrors() });
~~~
<%= caption "lib/router.js" %>
<%= highlight "4" %>


In order for our clearErrors() function to do its job, errors need to be marked as seen.
To do this properly, there's one edge case we need to take care of: 
when we throw up an error and then redirect the user somewhere else (as we do when they try to post a duplicate link), 
the redirection happens instantly.
This means that the user never has the chance to actually see the error before it's cleared.
　clearErrors() 関数が仕事をするために、エラーは seenにマークされている必要があります。
　正しく行うために、対処する必要のある１つのエッジケースがあります。：
　私たちがエラーを投げて、どこかにユーザーをリダイレクトすると、ユーザーが重複したリンク投稿した時と同様に、リダイレクトが瞬時に行われます。
　つまり、エラーがクリアされる前に、ユーザーは実際にエラーを見るチャンスがないということです。

This is where our seen property will come in handy.
We need to ensure that it's only set to true if the user has actually seen the error.
　これはseenプロパティが役立つところです。
　私たちはユーザーが実際にエラーを見た場合に、確実にtrueとだけセットする必要があります。　

To achieve this, we'll use Meteor.defer().
This function tells Meteor to execute its callback "just after" whatever's going on now.
If it helps, you can consider that defer() is like telling the browser to wait 1 millisecond before proceeding.
　このようにするために、Meteor.defer()を使います。
　この関数はMeteorに今起こっていることの「直後に」コールバックを実行する命令をします。
　これが機能すると、defer()はブラウザが先に進む前に、1ミリ秒待つように規定していると考えることができます。

Template.errors.helpers({

~~~js
Template.errors.helpers({
  errors: function() {
    return Errors.find();
  }
});

Template.error.rendered = function() {
  var error = this.data;
  Meteor.defer(function() {
    Errors.update(error._id, {$set: {seen: true}});
  });
};
~~~
<%= caption "client/views/includes/errors.js" %>
<%= highlight "7~12" %>

<%= commit "9-3", "Monitor which errors have been seen, and clear on routing." %>

What we're doing is telling Meteor to set seen to true 1 millisecond after the errors template has been rendered.
But remember how we said that redirection happens instantly?
This means that the redirection will kick in before the defer callback, 
which will never have a chance to be executed.
　私たちがしていることは、errorsテンプレートがレンダリングされた後で
　seenを1ミリ秒間にtrueとセットすることをMeteorに規定しています。
　しかし、私たちはどのようにリダイレクションが瞬時に起きると言ったのか（？？？）思い出して下さい。
　つまり、リダイレクションは実行されないdeferコールバックの前に作動するということです。

This is exactly what we want: 
if it's not executed our error will not be marked as seen, 
which means it won't be cleared, 
which means it'll appear on the page our user is redirected to just like we wanted!
 　これはまさに私たちが望んだことです。
　（it？）が実行されない場合、エラーはseenとマークされません。
　これは（it？）がクリアされないということで、
　 このページでユーザーが私たちが望んでいたようにリダイレクトされた 　　
と考えられます。

<% note do %>

### The `rendered` callback

The rendered callback triggers once our template has been rendered in the browser. 
Inside the callback, this refers to the current template instance, 
and this.data lets us access the data of the object that is currently being rendered (in our case, an error).
　レンダリングされたコールバックはブラウザでレンダリングされたテンプレートを
引き起こします。
　コールバックの中で、this は現在のテンプレートインスタンスを参照するので、
　私たちは　this.dataで現在レンダリングされているオブジェクトのデータにアクセスすることができます。　

Whew! That was a lot of work for something users will hopefully never see!
　ふう！　ユーザーが見ないようにするのは大仕事でしたね！

<% end %>
