---
title: Introduction
slug: introduction
date: 0001/01/01
number: 1
contents: Meteorのどこが特別なのか|この本について|この本の構成について
paragraphs: 35
---

Do a little mental experiment for me.
Imagine you're opening the same folder in two different windows on your computer.
　ちょっとだけ、思考実験。（？？？）
　あなたはＰＣ上の2つウィンドウで、同じフォルダーを開いているとします。

Now click inside one of the two windows and delete a file. 
Did the file disappear from the other window as well?
　ここで、１つのウィンドウ上でファイルを１つ削除します。
　そのファイルはもう１つのウィンドウからも削除されましたか？

You don't need to actually do these steps to know that it did. 
When we modify something on our local filesystems,
the change is applied everywhere without the need for refreshes or callbacks. It just happens.
　実際にこの作業をする必要はありません。
　私たちがローカルのファイルシステムを変更すると、
　更新やコールバックをするまでもなく、変更はどこでも有効になります。ローカルではデータの変化が瞬時に反映されます。（？？？）

However, let's think about how the same scenario would play out on the web.
For example, let's say you opened the same WordPress site admin in two browser windows
and then created a new post in one of them.
Unlike on the desktop, no matter how long you wait, the other window won't reflect the change unless you refresh it.
　一方で、ウェブでも同じシナリオが（play out？＝起こる？）かどうか考えてみましょう。
　たとえば、WordPressの管理画面を２つのブラウザウィンドウを開いて、その１つで投稿を行ったとします。
　デスクトップ上とは違い、どれだけあなたが待っていても、ブラウザを更新しない限り、もう一方のウィンドウは変更を反映させません。

Over the years, we've gotten used to the idea 
that a website is something that you only communicate with in short, separate bursts.
　長い間、私たちはウェブサイトとは、要するに（separate bursts？）とコミュニケーションするものと考えるようになってしまいました。

But Meteor is part of a new wave of frameworks and technologies 
that are looking to challenge the status quo by making the web real-time and reactive.
　しかし、Meteorはウェブをリアルタイムとリアクティブにすることでこの状況を打破しようとする
　新しいフレームワークであり、新しいテクノロジーです。（？？？）

### Meteorとは?

Meteor is a platform built on top of Node.js for building real-time web apps.
It's what sits between your app's database and its user interface and makes sure that both are kept in sync.
　Meteorはリアルタイムウェブアプリケーションを開発するために、（top of？）Node.jsで作られたプラットフォームです。
　Meteorはアプリケーションのデータベースとユーザーインターフェースを同期した状態にします。

Since it's built on Node.js, Meteor uses JavaScript on both the client and on the server. 
What's more, Meteor is also able to share code between both environments.
　MeteorはNode.jsで作られているため、Meteor はクライアントとサーバーでJavaScriptを使います。
　さらに、Meteor ではクライアントとサーバーでコードを共有することもできます。

The result of all this is a platform that manages to be very powerful 
and very simple by abstracting away many of the usual hassles and pitfalls of web app development.
　こうした結果、Meteor は通常のアプリ開発で多くのイライラや落とし穴を取り除くことで、
　パワフルでシンプルなプラットフォームとなっています。（？？？）

### なぜMeteorなのか?

So why should you spend your time learning Meteor rather than another web framework? 
Leaving aside all the various features of Meteor, we believe it boils down to one thing:
Meteor is easy to learn.
　では、なぜあなたは他のフレームワークではなく、Meteorを学ぶ時間をかけるべきなのでしょうか？
　Meteor の様々な機能はともかく、それは１つの理由に集約できると私たちは確信しています：
　Meteor は簡単に学べるからです。

More so than any other framework, Meteor makes it possible to get a real-time web app up 
and running on the web in a matter of hours. 
And if you've ever done front-end development before,
you'll already be familiar with JavaScript and won't even need to learn a new language.
　他のフレームワークよりも、Meteor ではほんの数時間でリアルタイムウェブアプリを作り、ウェブ上で動かすことができます。
　それと、もしあなたが以前にフロントエンドの開発をしたことがあれば、
　あなたはすでにJavaScriptに馴染みがあり、新しい言語を学ぶ必要はありません。

Meteor might be the ideal framework for your needs, or then again it might not. 
But since you can get started over the course of a few evenings or a week-end,
why not try it and find out for yourself?
　Meteorはあなたが求める理想的なフレームワークであるかもしれませんし、そうではないかもしれません。
　ともかく、夕方の時間や週末で始めることができるのだから、実際に試して自分で確かめてみてはいかがでしょう？

### なぜこの本なのか?

For the past 6 months, we've been working on Telescope, an open-source Meteor app 
that lets anybody create their own social news site (think Reddit or Hacker news), 
where people can submit links and vote on them.
　この6ヶ月間、私たちは Telescope の開発に取り組んできました。
　Telescope は Meteor で作られたオープンソースのアプリで、
　Reddit や Hacker News のようにリンクを投稿できて投票できるソーシャルニュースサイトをだれでも作ることができます。

We learned a ton building the app, but it wasn't always easy to find the answers to our questions. 
We had to piece things together from many different sources, and in many cases even invent our own solutions. 
So with this book, we wanted to share all those lessons, 
and create a simple step-by-step guide that will walk you through building a full-fledged Meteor app from scratch.
　アプリを作りながら私たちは多くのことを学びましたが、私たちの疑問について答えを見つけることは必ずしも簡単ではありませんでした。
　私たちは様々な情報源をつなぎ合わせなければなりませんでした。そして多くの場合、自分たちで解決策を見つけました。
　そのため、本書では、私たちは　こうした経験上の知識を共有して、
　ゼロから本格的な Meteor アプリを順を追って作るための段階的なガイドラインを作りたいと考えました。　　

The app we're building is a slightly simplified version of Telescope, which we call Microscope.
While building it, we'll address all the different elements that go into building a Meteor app,
such as user accounts, Meteor collections, routing, and more.
　この本で開発するアプリは、Telescope を少し単純化させた Microscope というものです。
　Microscope を開発しながら、私たちはユーザーアカウントや Meteor コレクション、ルーティングなどに取り組んでいくことになります。

And after you're done reading the book, if you want to go further 
you'll be able to easily understand the code of Telescope, since it follows the same patterns.
　この本を読み終えて、さらに Telescope について学びたいとしたら、あなたは Telescope のコードを簡単に理解できることでしょう。
　というのも、Microscope は Telescope と同じパターンをしているからです。

### この本の対象者は？

One of our goals while writing the book was to keep things approachable and easy to understand. 
So you should be able to follow along 
even if you have no experience with Meteor, Node, MVC frameworks, or even server-side coding in general.
　この本を書く上での私たちの目標というは、Meteor でアプリを作ることをなるべく親しみやすく、理解しやすくすることでした。
　そのため、あなたが Meteor や Node.js、MVCフレームワーク、サーバーサイドのコーディングの経験が全くなかったとしても、
　理解してくことができることでしょう。

On the other hand, we do assume familiarity with basic JavaScript syntax and concepts.
But if you've ever hacked together some jQuery code or played around with the browser's developer console,
you should be OK.
　ですが、私たちはこの本の読者について JavaScript の基本的な（ syntax？＝構文？）やコンセプトについてよく知っている人と想定しています。
　ただ、もし JQuery を使ったことがあったり、ブラウザでデベロッパーツールのコンソールでJavaScriptをいじったことがあれば、問題ありません。

### 著者について

In case you're wondering who we are and why you should trust us, here is a little more background on both of us.
　私たちが何者なのか、信頼できる人物なのか読者の方が心配しないように、ここで私たち二人について紹介します。

<%= image "tom-photo.jpg", "portrait" %>

Tom Coleman is one part of Percolate Studio, a web development shop with a focus on quality and user experience.
He's the co-creator of Meteorite and the Atmosphere package repository, 
and is also one of the brains behind many other Meteor open-source projects (such as Iron Router).
　トム・コールマンはクォリティとユーザー・エクスペリエンスに焦点を置いたウェブ開発スタジオである Percolate Studio の一人です。
　トムは Meteorite と Atmosphere パッケージリポジトリの共同制作者であり、Iron Router など多くの Meteor オープンソースプロジェクトに貢献しています。

<%= image "sacha-photo.jpg", "portrait" %>

Sacha Greif has worked with startups such as Hipmunk and RubyMotion as a product and web designer. 
He's the creator of Telescope and Sidebar (which is based on Telescope), and is also the founder of Folyo.
　サシャ・グリーフは Hipmunk や RubyMotion といったスタートアップ企業で商品とウェブのデザイナーとして働いてきました。
　サシャは Telescope と Telescope を基にした Sidebar の制作者であり、Folyo の設立者です。

### Chapters & Sidebars 

We wanted this book to be useful both for the novice Meteor user and the advanced programmer, 
so we split the chapters into two categories: regular chapters (numbered 1 through 14) and sidebars (.5 numbers).
　私たちはこの本がMeteorの初心者ユーザーと熟練のプログラマーのどちらでも役立つものにしたいと思っています。　　
　そのため、私たちは１から14の通常の章と.5がついている補足事項の２つのカテゴリーに章を分割しました。

Regular chapters will walk you through building the app,
and will try to get you operational as soon as possible 
by explaining the most important steps without bogging you down with too much detail.
　通常の章では、１つ１つ段階的にアプリを作っていきます。
　詳細すぎて読者の方が泥沼にはまることがないように最も重要なステップを説明することで、
　できる限り早くアプリを作れるようにします。（？？？）

On the other hand, sidebars will go deeper into Meteor's intricacies,
and will help you get a better understanding of what's really going on behind the scenes.
　一方で、補足事項では Meteor の複雑な部分に深く入り込んでいきます。
　そのため、裏側で何が実際に起きているのか理解する上で役立ちます。

So if you're a beginner, feel free to skip the sidebars on your first read,
and come back to them later on once you've played around with Meteor.
　初心者の方が最初に読む際は、補足事項を飛ばして Meteor をひと通り動かした後で戻って読むのも良いでしょう。（？？？）

### Commits & Live Instances　コミットとライブインスタンス

There's nothing worse than following along in a programming book 
and suddenly realizing your code has gotten out of sync with the examples 
and that nothing works like it should anymore.
　プログラミングの本を読み進めて、急にコードが例題と一致していないことに気づいて、
　これ以上何をやっても無駄になってしまうことほど最悪なことはありません。

To prevent this, we've set up a GitHub repository for Microscope, 
and we'll also provide direct links to git commits every few code changes. 
Additionally, each commit also links to a live instance of the app at this particular commit, 
so you can compare it with your local copy. Here's an example of what that will look like:
　こうしたことを防ぐために、私たちは Microscope 用の GitHub リポジトリを作りました。
　また、いくつかコードが変わる度に git コミットへのダイレクトリンクを作りました。
　さらに、各コミットはそのコミット時点でのアプリの（live instance？＝ライブインスタンス？）にリンクしてあります。　
　そのため、あなたがローカルで作ったものと比べることができます。どのようになっているかがこちらの例です。

<%= commit "11-2", "ヘッダーで通知を表示する" %>

But note that just because we provide these commits doesn't mean you should just go from one git checkout to the next.
You will learn much better if you take the time to manually type out your app's code!
　しかし、私たちはこうしたコミットを読者の方が１つのgitを見ただけで次へ行くように作ったのではないことに留意してください。
　時間をとって手入力でアプリのコードを打ち込めば、より多くのことを学ぶことができます！（？？？）

### A Few Other Resources

If you ever want to learn more about a particular aspect of Meteor, 
the official Meteor documentation is the best place to start.
　Meteorの特定の部分についてさらに学びたいという場合は、
　公式の Meteor ドキュメンテーションが最良の場所です。

We also recommend Stack Overflow for troubleshooting and questions, 
and the #meteor IRC channel if you need live help.
　私たちは、トラブルシューティングや質問をする場所として Stack Overflow を推奨しています。
　また、即座にヘルプがほしい場合は #meteor IRCチャンネルを推奨しています。

<% note do %>

### Do I Need Git?　Gitは必要？

While being familiar with Git version control 
is not strictly necessary to follow along with this book, we strongly recommend it.
　Git のバージョン管理に（？？？）であることは、本書を読み進める上で厳密には必要ではありませんが、
　私たちは Git に慣れ親しむことをおすすめします。

If you want to get up to speed, we recommend Nick Farina's Git Is Simpler Than You Think.
　すぐに身につけたいという場合（？？？）、私たちは Nick FarinaのGit Is Simpler Than You Think を一読することをおすすめします。

If you're a Git novice, we also recommend the GitHub for Mac app, 
which lets you clone and manage repos without using the command line.
　もし Git の初心者の場合は、私たちは GitHub for Mac アプリをおすすめしています。
　GitHub for Mac アプリでは、コマンドラインを使わずにクローンやレポジトリを管理することができるからです。（？？？）

<% end %>

### Getting in Touch　連絡先

If you'd like to get in touch with us, you can email us at hello@discovermeteor.com.
Additionally, if you find a typo or another mistake in the book's contents,
you can let us know by submitting a bug in this GitHub repo.
If you have a problem with Microscope's code, you can submit a bug in Microscope's repository.
Finally, for every other question you can also just leave us a comment in this app's side panel.

- 私たちとコンタクトをとりたい場合、emailではhello@discovermeteor.com でご連絡ください。
- また、本書の内容で誤植やミスを見つけた際は、この GitHub リポジトリでバグを投稿してお知らせください。
- もしMicroscopeのコードに間違いがあった場合は、Microscopeのリポジトリでバグを投稿してください。
- 最後に、その他の質問はこのアプリのサイドパネルでコメントを残すこともできます。
