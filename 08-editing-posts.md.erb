---
title: Editing Posts
slug: editing-posts
date: 0008/01/01
number: 8
contents: 投稿を編集するフォームを加えます。| 編集（permissions？＝権限？）をセットアップする。|（Restrict which properties can be edited？）
paragraphs: 29
---

Now that we can create posts, the next step is being able to edit and delete them. 
While the UI code to do so is fairly simple, this is a good time to talk about how Meteor manages user permissions.
　私たちは投稿を作ることができるので、次のステップは投稿の編集と削除をできるようにすることです。
　そうするためのUIのコードはとてもシンプルですが、
　ここでMeteorがどのようにしてユーザーパーミッションを（ manage？）するのか話すのも良い時期でしょう。


Let's first hook up our router.
We'll add a route to access the post edit page and set its data context:
　はじめに、ルーターを（hook up？＝つなぎ？）ましましょう。
　私たちは投稿編集ページアクセスするためにルートを加えて、（set its data context？＝データコンテキストを設定します？）：

~~~js
Router.configure({
  layoutTemplate: 'layout'
});

Router.map(function() {
  this.route('postsList', {path: '/'});

  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });

  this.route('postEdit', {
    path: '/posts/:_id/edit',
    data: function() { return Posts.findOne(this.params._id); }
  });

  this.route('postSubmit', {
    path: '/submit'
  });
});

var requireLogin = function() {
  if (! Meteor.user()) {
    if (Meteor.loggingIn())
      this.render('loading')
    else
      this.render('accessDenied');
  
    this.stop();
  }
}

Router.before(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "12~15" %>

### The Post Edit Template　　Post Editテンプレート

We can now focus on the template. 
Our postEdit template will be a fairly standard form:
　これで私たちはテンプレートに集中することができます。
　postEditテンプレートは　（fairly standard form？＝かなりスタンダードなフォーム？）です。

~~~html
<template name="postEdit">
  <form class="main">
    <div class="control-group">
        <label class="control-label" for="url">URL</label>
        <div class="controls">
            <input name="url" type="text" value="{{url}}" placeholder="Your URL"/>
        </div>
    </div>

    <div class="control-group">
        <label class="control-label" for="title">Title</label>
        <div class="controls">
            <input name="title" type="text" value="{{title}}" placeholder="Name your post"/>
        </div>
    </div>

    <div class="control-group">
        <div class="controls">
            <input type="submit" value="Submit" class="btn btn-primary submit"/>
        </div>
    </div>
    <hr/>
    <div class="control-group">
        <div class="controls">
            <a class="btn btn-danger delete" href="#">Delete post</a>
        </div>
    </div>
  </form>
</template>
~~~
<%= caption "client/views/posts/post_edit.html" %>

And here's the post_edit.js manager that goes with it:
　そしてこれが（goes with it？）するpost_edit.jsマネージャーです。

~~~js
Template.postEdit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var currentPostId = this._id;
    
    var postProperties = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val()
    }
    
    Posts.update(currentPostId, {$set: postProperties}, function(error) {
      if (error) {
        // display the error to the user
        alert(error.reason);
      } else {
        Router.go('postPage', {_id: currentPostId});
      }
    });
  },
  
  'click .delete': function(e) {
    e.preventDefault();
    
    if (confirm("Delete this post?")) {
      var currentPostId = this._id;
      Posts.remove(currentPostId);
      Router.go('postsList');
    }
  }
});
~~~
<%= caption "client/views/posts/post_edit.js" %>

By now most of that code should be familiar to you.
　（By now？＝そろそろ？）ほとんどのコードは　（should be familiar to？＝なじみのあるようにすべき？）です。

We have two template event callbacks: 
one for the form's submit event, and one for the delete link's click event.
　私たちは２つのテンプレート（event callbacks？＝イベントコールバック？）があります：
　ひとつはフォームのsubmitイベントで、もうひとつはリンクを削除するclickイベントです。

The delete callback is extremely simple: 
suppress the default click event, then ask for confirmation.
If you get it, obtain the current post ID from the Template's data context, delete it, and finally redirect the user to the homepage.
　（delete callback？＝デリートコールバック？）は、かなりシンプルです：
　デフォルトクリックイベントを（suppress？＝抑制？）して、（ask for confirmation？＝確認を求め？）ます。
　（get it？＝これを理解すると）、テンプレートデータコンテキストから　（current？＝現在の？）投稿IDを取得して、
　（ it？）を削除して、最終的にユーザーをホームページにリダイレクトしましょう。

The update callback is a little longer, but not much more complicated.
After suppressing the default event and getting the current post,
we get the new form field values from the page and store them in a postProperties object.
　（update？）コールバックは少し長いですが、（ not much more？＝たいして？）複雑ではありません。
　デフォルトイベントを（suppress？＝抑制？）して、現在の投稿を（get？）した後で、
　私たちは　ページから新しい（form field value？）を（get？）して、postPropertiesオブジェクトに（them？）を格納します。

We then pass this object to Meteor's Collection.update() Method, and use a callback that either displays an error if the update failed,
or sends the user back to the post's page if the update succeeded.
　これで私たちは　オブジェクトを　MeteorのCollection.update()メソッドに渡して、もしアップデートが失敗したら、（ either？＝どちらかの？）エラーを表示するコールバックを使います。
　あるいは、アップデートに成功するとユーザーを投稿ページに送ります。

### Adding Links

We should also add edit links to our posts so that users have a way to access the post edit page:
　ユーザーが　（ post edit page？＝編集ページの投稿？）にアクセスする方法（have？）できるように、私たちは投稿に（add edit links？＝編集リンクを加えます？）　　

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
      <p>
        submitted by {{author}}
        {{#if ownPost}}<a href="{{pathFor 'postEdit'}}">Edit</a>{{/if}}
      </p>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html" %>
<%= highlight "5~8" %>

Of course, we don't want to show you an edit link to somebody else's form. 
This is where the ownPost helper comes in:
　もちろん、私たちは　（somebody else's form？＝誰かのフォーム）に編集リンクを　表示したくありません。
　これは ownPostヘルパーが　（comes in？）する場所です。

~~~js
Template.postItem.helpers({
  ownPost: function() {
    return this.userId == Meteor.userId();
  },
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  }
});
~~~
<%= caption "client/views/posts/post_item.js" %>
<%= highlight "2~4" %>

<%= screenshot "8-1", "Post edit form." %>

<%= commit "8-1", "Added edit posts form." %>


Our post edit form is looking good, but you won't be able to actually edit anything right now. What's going on?
　投稿編集フォームは　良さそうに見えますが、　今は何も編集することはできません。　（What's going on?＝どういうことでしょうか？）

### Setting Up Permissions

Since we've previously removed the insecure package, all client-side modifications are currently being denied.
　私たちは　以前にinsecureパッケージを削除したので、　すべてのクライアントサイドの（modification？＝変更？）は現在　（deny？）されます。

////

~~~js
// check that the userId specified owns the documents
ownsDocument = function(userId, doc) {
  return doc && doc.userId === userId;
}
~~~
<%= caption "lib/permissions.js" %>

////

////

~~~js
Posts = new Meteor.Collection('posts');

Posts.allow({
  update: ownsDocument,
  remove: ownsDocument
});

Meteor.methods({
  ...
~~~
<%= caption "collections/posts.js" %>
<%= highlight "3~6" %>

<%= commit "8-2", "Added basic permission to check the post's owner." %>

### Limiting Edits

////

////

~~~js
Posts = new Meteor.Collection('posts');

Posts.allow({
  update: ownsDocument,
  remove: ownsDocument
});

Posts.deny({
  update: function(userId, post, fieldNames) {
    // may only edit the following two fields:
    return (_.without(fieldNames, 'url', 'title').length > 0);
  }
});
~~~
<%= caption "collections/posts.js" %>
<%= highlight "8~13" %>

<%= commit "8-3", "Only allow changing certain fields of posts." %>

////

////

<% note do %>

### Method Calls vs Client-side Data Manipulation

////

////

////

////

////

////

- ////
- ////
- ////

<% end %>

