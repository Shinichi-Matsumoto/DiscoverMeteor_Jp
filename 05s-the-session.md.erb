---
title: The Session
slug: the-session
date: 0005/01/02
number: 5.5
sidebar: true
contents: Learn about the Meteor Session|Learn about the autorun function|Learn about Hot Code Reload
paragraphs: 33
---

Meteor is a reactive framework. 
What this means is that as data changes, 
things in your application change without you having to explicitly do anything.
Meteorはリアクティブなフレームワークです。
つまり、データが変化すると、何もしなくても確実にアプリケーション内のデータも変化するということです。　（？？？）

We've already seen this in action in how our templates change as the data and the route changes.
私たちはすでに作業を 見てきました。　 どのようにテンプレートが変化するのか　（？？？？？？）

We'll dive deeper into how this works in later chapters, 
but for now, we'd like to introduce some basic reactive features that are extremely useful in general apps.
 これがどのように動いているのかは後の章でじっくり見ていきます。
 ここでは、私たちは一般的なアプリでとても役立つ　基本的なリアクティブの特徴を　紹介したいと思います。　

### The Meteor Session

Right now in Microscope, 
the current state of the user's application is completely contained in the URL that they are looking at 
(and the database).
現在のMicroscopeでは　ユーザーのアプリケーションの現在の状態は（？？？）　ユーザーが見ているURLが含まれています。（？？データベース）

But in many cases, you'll need to store some ephemeral state 
that is only relevant to the current user's version of the application 
(for example, if an element is shown or hidden).
The Session is a convienent way to do this.
しかし、多くの場合、　一時的な状態を保存する必要があります。　
現在のユーザーの　アプリケーションの（？？？）にだけ関係しています。
（たとえば、要素が現れるか隠れるかどうか）。
セッションはこうするための便利な方法です。

The Session is a global reactive data store. 
It's global in the sense of a global singleton object: there's one session, and it's accessible everywhere. 
Global variables are usually seen as a bad thing,
but in this case the session is used as a central communication bus for different parts of the application.
セッションはグローバルのリアクティブデータストアです。（？？？）
グローバルシングルトンオブジェクトという意味のグローバルです。（？？？）１つのセッションはどこからでもアクセスできます。
グローバル変数はよく悪いものだと見られますが、この場合セッションはアプリケーションの違う部分への中央　コミュニケーションバスとして使われます。（？？？）

### Changing the Session

The Session is available everywhere as Session. To set a session value, you can call:
セッションは、Sessionでどこからでも使うことができます。セッションの値をセットするには、次のようにやります。（？？？）

~~~js
❯ Session.set('pageTitle', 'A different title');
~~~
<%= caption "Browser console" %>

You can read the data back out again with Session.get('mySessionProperty');. 
This is a reactive data source, which means that if you were to put it in a helper, 
you would see the helper's output change reactively as the Session variable is changed.
 Session.get('mySessionProperty');を使うことで、（？？？）　　データを読むことができます。
これはリアクティブなデータソースです。
つまり、ヘルパー内にこれを入れると　セッション変数が変化した時に　反動的に　ヘルパーの出力が変化するという意味です。（？？？）

To try this, add the following code to the layout template:
これを試してみるために、レイアウトテンプレートに次のようなコードを追加しましょう。

~~~html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{pathFor 'postsList'}}">{{pageTitle}}</a>
  </div>
</header>
~~~
<%= caption "client/views/application/layout.html"%>

~~~js
Template.layout.helpers({
  pageTitle: function() { return Session.get('pageTitle'); }
});
~~~
<%= caption "client/views/application/layout.js"%>

Meteor's automatic reload (know as the “hot code reload” or HCR) preserves Session variables,
so we should now see "A different title" displayed in the nav bar. 
If not, just type the previous Session.set() command again.
Meteorの自動リロード（つまり「ホットコードリロード」）はセッション変数を保存します。（？？？）
そのため、私たちは今「違ったタイトル」がナビゲーションバーに表示されているのがわかると思います。
そうでなかったら、もう一度先ほどのSession.set()コマンドを入力してください。

Moreover if we change the value once more (again in the browser console), we should see yet another title displayed:
さらにもう一度、ブラウザーコンソール上で値が変化したら、また違ったタイトルが表示されます。

~~~js
❯ Session.set('pageTitle', 'A brand new title');
~~~
<%= caption "Browser console" %>

The Session is globally available, so such changes can be made anywhere in the application.
This gives us a lot of power, but can also be a trap if used too much.
セッションはグローバルに使うことができるので、アプリケーション内のどこでもこうした変化をさせることができます。
こうすることで私たちは多くの力を得られますが（？？？）、使いすぎてしまうと罠にはまります。

<% note do %>

### Identical Changes

Identical Changes

If you modify a Session variable with Session.set() but set it to an identical value,
Meteor is smart enough to bypass the reactive chain, and avoid unnecessary method calls.
Session.set()でセッション変数を変更すると、全く同じ値をセットします。
Meteorは　リアクティブチェーン（？？？）を回避できるほど頭が良いので、不必要なメソッドコールを回避します。

<% end %>

### Introducing Autorun

We've looked at an example of a reactive data source, and watched it in action inside a template helper. 
But while some contexts in Meteor (such as template helpers) are inherently reactive,
the majority of a Meteor's app code is still plain old non-reactive JavaScript.
私たちはリアクティブデータストアの例で、テンプレートヘルパー内で（？？？）、を見てきました。
しかし、Meteorでのコンテキストの多く（テンプレートヘルパーなど）は本質的にリアクティブです。
Meteorのアプリのコードの多くはまだ素のリアクティブではないJavaScriptです。

Let's suppose we have the following code snippet somewhere in our app:
　次のようなコードをアプリのどこかにあるとします。

~~~js
helloWorld = function() {
  alert(Session.get('message'));
}
~~~

Even though we're calling a Session variable, the context in which it's called is not reactive, 
meaning that we won't get new alerts every time we change the variable.
私たちはセッション変数と呼んできましたが、このコンテキストはリアクティブではないと呼んでいないのは、
私たちが変数を変えるたびに新しいalertを取得しないという意味です。　（？？？）

This is where Autorun comes in. As the name implies, 
the code inside an autorun block will automatically run and keep running each 
and every time the reactive data sources used inside it change.
ここでAutorunが登場します。その名前の通り、
autorunブロックの中に入れたコードは自動的に動きます。（？？？）
　また、リアクティブデータストアが使われる度に変化します。動き続けます　（？？？）

Try typing this into the browser console:
ブラウザーコンソールでこのようにタイピングしてみてください。

~~~js
❯ Deps.autorun( function() { console.log('Value is: ' + Session.get('pageTitle')); } );
Value is: A brand new title
~~~
<%= caption "Browser console" %>

As you might expect, the block of code provided inside the autorun runs once,
outputting its data to the console. Now, let's try changing the title:
　ご推察の通り、このコードのブロックは autorunが一度動くと　　（？？？）
　データをコンソールに出力します。　では、タイトルを変化させてみましょう。

~~~js
❯ Session.set('pageTitle', 'Yet another value');
Value is: Yet another value
~~~
<%= caption "Browser console" %>

Magic! As the session value changed, 
the autorun knew it had to run its contents all over again, re-outputting the new value to the console.
魔法のようだ！セッションの値が変化すると、　
　コンソールに新しい値を再出力することで　もう一度内容を動かす必要があると　（？？？）　　autorunは　識別しました。　

So going back to our previous example, 
if we want to trigger a new alert every time our Session variable changes, 
all we need to do is wrap our code in an autorun block:
そこで、先ほどの例に戻りましょう。
私たちが　セッション変数が変わる度に　新しいアラートを動作させたい場合に、
autorunブロックにコードをラップする必要があります。

~~~js
Deps.autorun(function() {
  alert(Session.get('message'));
});
~~~

As we've just seen, autoruns can be very useful to track reactive datasources and react imperatively to them.
これまで見てきたように、autorunはリアクティブデータソースをトラッキング（？？？）して、（？？？）に反応することにとても役立ちます。　

### Hot Code Reload

During our development of Microscope, we've been taking advantage of one of Meteor's time-saving features: 
hot code reload (HCR). 
Whenever we save one of our source code files, 
Meteor detects the changes and transparently restarts the running Meteor server, 
informing each client to reload the page.
Microscopeの開発を通して、私たちはMeteorの時間節約する機能を利用してきていました：
ホットコードリロード（HCR）です。
私たちははソースコードファイルを保存する時はいつでも、
Meteorは変化を見つけて、各クライアントにページをリロードすることを伝えて瞬時に　Meteorサーバーを動かすように再起動します。

This is similar to an automatic reload of the page, but with an important difference.
これは自動的にページがリロードすることに似ていますが、重要な違いがあります。

To find out what that is, start by resetting the session variable we've been using:
どういうことか理解するために、私たちが使ってきたセッション変数を再設定することから始めます。

~~~js
❯ Session.set('pageTitle', 'A brand new title');
❯ Session.get('pageTitle');
'A brand new title'
~~~
<%= caption "Browser console" %>

If we were to reload our browser window manually, 
our Session variables would naturally be lost (since this would create a new session).
On the other hand, if we trigger a hot code reload (for example, by saving one of our source files)
the page will reload,
but the session variable will still be set. Try it now!
ブラウザーウィンドウを手動でリロードすると、
セッショ変数は　当然ながらなくなります。（？？？）　（これは新しいセッションが作られたからです。）
一方で、たとえば、ソースファイルを保存することでホットコードリロードを動作させると、ページはリロードしますが、
セッション変数もまだ設定されています。試してみましょう！

~~~js
❯ Session.get('pageTitle');
'A brand new title'
~~~
<%= caption "Browser console" %>

So if we're using session variables to keep track of exactly what the user is doing,
the HCR should be almost transparent to the user, as it will preserve the value of all session variables.
This enables us to deploy new production versions of our Meteor application with the confidence
that our users will be minimally disrupted.
そのため、ユーザーが何をしているのか正確に把握するためにセッション変数を使います。
HCRは　ユーザーに見えないところで実行されます。　全てのセッション変数の値を保存する
こうすることで、ユーザーの混乱を最小限にするという確証を得て　Meteorアプリケーションの新製品のバージョン（？？？）をデプロイすることができます。
　　　
Consider this for a moment. 
If we can manage to keep all of our state in the URL and the session, 
we can transparently change the running source code of each client's application 
underneath them with minimal disruption.
この点について少し考えてみましょう。
もし私たちが　URLやセッションの全ての状態を保持できるとしたら、
私たちは　各クライアントのアプリケーションのソースコードの動作を混乱を最小限にしてユーザーが気づくことなく変えることができます。

Let's now check what happens when we refresh the page manually:
では、ページを手動で更新した際にどんなことが起きているのかチェックしていきましょう。

~~~js
❯ Session.get('pageTitle');
null
~~~
<%= caption "Browser console" %>

When we reloaded the page, we lost the session. On an HCR,
Meteor saves the session to local storage in your browser and loads it in again after the reload. 
However, the alternate behaviour on explicit reload makes sense: 
if a user reloads the page, it's as if they've browsed to the same URL again,
and they should be reset to the starting state that any user would see when they visit that URL.
ページをリロードすると、セッションがなくなります。
HCR（？？？）、Meteorは　ブラウザー内のローカルストレージに　セッションを保存します。そしてリロードした後に再び読み込みます。
しかし、交互に起こるリロードの動作は理に適っています：（？？？）
ユーザーがページをリロードすると、同じURLを再び見るようなものです。
いつユーザーがそのURLを訪れたのかを理解する　　状態が始まることを　リセットするべきです。（？？？）

The important lessons in all this are:
重要なレッスンはこうしたことです：

Always store user state in the Session or the URL so that users are minimally disrupted when a hot code reload happens.
Store any state that you want to be shareable between users within the URL itself.
1. ユーザーの状態を常にセッションやURLで保存しているので、ユーザーはホットコードリロード時に混乱を最小限にすることができます。
2. URLの（？？？）ユーザー間で共有したいどんな状態でも保存します。　　
