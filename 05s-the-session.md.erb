---
title: The Session
slug: the-session
date: 0005/01/02
number: 5.5
sidebar: true
contents: Learn about the Meteor Session|Learn about the autorun function|Learn about Hot Code Reload
paragraphs: 33
---

Meteor is a reactive framework. 
What this means is that as data changes, 
things in your application change without you having to explicitly do anything.
Meteorはリアクティブなフレームワークです。
つまり、データが変化すると、何もしなくても確実にアプリケーション内のデータも変化するということです。　（？？？）

We've already seen this in action in how our templates change as the data and the route changes.
私たちはすでに作業を 見てきました。　 どのようにテンプレートが変化するのか　（？？？？？？）

We'll dive deeper into how this works in later chapters, 
but for now, we'd like to introduce some basic reactive features that are extremely useful in general apps.
 これがどのように動いているのかは後の章でじっくり見ていきます。
 ここでは、私たちは一般的なアプリでとても役立つ　基本的なリアクティブの特徴を　紹介したいと思います。　

### The Meteor Session

Right now in Microscope, 
the current state of the user's application is completely contained in the URL that they are looking at 
(and the database).
現在のMicroscopeでは　ユーザーのアプリケーションの現在の状態は（？？？）　ユーザーが見ているURLが含まれています。（？？データベース）

But in many cases, you'll need to store some ephemeral state 
that is only relevant to the current user's version of the application 
(for example, if an element is shown or hidden).
The Session is a convienent way to do this.
しかし、多くの場合、　一時的な状態を保存する必要があります。　
現在のユーザーの　アプリケーションの（？？？）にだけ関係しています。
（たとえば、要素が現れるか隠れるかどうか）。
セッションはこうするための便利な方法です。

////

### Changing the Session

////

~~~js
❯ Session.set('pageTitle', 'A different title');
~~~
<%= caption "Browser console" %>

////

////

~~~html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{pathFor 'postsList'}}">{{pageTitle}}</a>
  </div>
</header>
~~~
<%= caption "client/views/application/layout.html"%>

~~~js
Template.layout.helpers({
  pageTitle: function() { return Session.get('pageTitle'); }
});
~~~
<%= caption "client/views/application/layout.js"%>

////

////

~~~js
❯ Session.set('pageTitle', 'A brand new title');
~~~
<%= caption "Browser console" %>

////

<% note do %>

### Identical Changes

////

<% end %>

### Introducing Autorun

////

////

~~~js
helloWorld = function() {
  alert(Session.get('message'));
}
~~~

////

////

////

~~~js
❯ Deps.autorun( function() { console.log('Value is: ' + Session.get('pageTitle')); } );
Value is: A brand new title
~~~
<%= caption "Browser console" %>

////

~~~js
❯ Session.set('pageTitle', 'Yet another value');
Value is: Yet another value
~~~
<%= caption "Browser console" %>

////

////

~~~js
Deps.autorun(function() {
  alert(Session.get('message'));
});
~~~

////

### Hot Code Reload

////

////

////

~~~js
❯ Session.set('pageTitle', 'A brand new title');
❯ Session.get('pageTitle');
'A brand new title'
~~~
<%= caption "Browser console" %>

////

~~~js
❯ Session.get('pageTitle');
'A brand new title'
~~~
<%= caption "Browser console" %>

////

////

////

~~~js
❯ Session.get('pageTitle');
null
~~~
<%= caption "Browser console" %>

////

////

1. ////
2. ////
