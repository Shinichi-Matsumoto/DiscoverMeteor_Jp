---
title: Creating Posts
slug: creating-posts
date: 0007/01/01
number: 7
contents: Learn how to submit a post client-side.|Implement a simple security check.|Restrict access to the post submit form.|Learn to use a server-side Method for added security.
paragraphs: 60
---

We've seen how easy it is to create posts via the console, 
using the Posts.insert database call,
but we can't expect our users to open the console to create a new post.
私たちはコンソール経由でデータベースを呼び出すPosts.insertを使うことで、いかに簡単に投稿を作るのか見てきました。
しかし私たちはユーザーがコンソールを開いて新しい投稿をすることを見込むことはできません。

Eventually, we'll need to build some kind of user interface to let our users post new stories to our app.
最終的に、私たちは　ユーザーがアプリに新しい（ stories？）を投稿できるように　ある種のユーザーインターフェースを作る必要があります。

### Building The New Post Page

We begin by defining a route for our new page:
新しいページにルートを定義する（？？？）ことから始めていきます。

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "13~15" %>

We're using the router's data function to set the postPage template's data context. 
Remember that whatever we put into the data context will be available as this inside the template helpers.
私たちはpostPageテンプレートのデータコンテキストを設定するために　ルーターのdata関数を使っています。
私たちがデータコンテキストに入れるものは　テンプレートヘルパー内で　使うことができることを覚えておきましょう。（？？？）　

### Adding A Link To The Header

With that route defined, we can now add a link to our submit page in our header:
ルートが定義されると、私たちは　ヘッダーにページを（submit？）するための　リンクを入れることができます。

~~~html
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
      <div class="nav-collapse collapse">
        <ul class="nav">
          <li><a href="{{pathFor 'postSubmit'}}">New</a></li>
        </ul>
        <ul class="nav pull-right">
          <li>{{loginButtons}}</li>
        </ul>
      </div>
    </div>
  </header>
</template>
~~~
<%= caption "client/views/includes/header.html" %>
<%= highlight "11~16" %>

Setting up our route means that if a user browses to the /submit URL,
Meteor will display the postSubmit template. So let's write that template:
ルートを設定するということは　ユーザーが　 /submit URLのウェブページを見るなら
Meteorが　postSubmitテンプレートを表示するということを意味しています。では、テンプレートを書いていきましょう。

~~~html
<template name="postSubmit">
  <form class="main">
    <div class="control-group">
        <label class="control-label" for="url">URL</label>
        <div class="controls">
            <input name="url" type="text" value="" placeholder="Your URL"/>
        </div>
    </div>

    <div class="control-group">
        <label class="control-label" for="title">Title</label>
        <div class="controls">
            <input name="title" type="text" value="" placeholder="Name your post"/>
        </div>
    </div>

    <div class="control-group">
        <label class="control-label" for="message">Message</label>
        <div class="controls">
            <textarea name="message" type="text" value=""/>
        </div>
    </div> 

    <div class="control-group">
        <div class="controls">
            <input type="submit" value="Submit" class="btn btn-primary"/>
        </div>
    </div>
  </form>
</template>

~~~
<%= caption "client/views/posts/post_submit.html" %>

Note: that’s a lot of markup, but it simply comes from using Twitter Bootstrap. 
While only the form elements are essential, 
the extra markup will help make our app look a little bit nicer. It should now look similar to this:
注意：かなりマークアップしましたが、　これはTwitter Bootstrapによるものです。
form要素だけは必要ですが、
残りのマークアップは　アプリの見た目を若干良くするために行っています。今はこのようになっているはずです。

<%= screenshot "7-1", "The post submit form" %>

This is a simple form. We don't need to worry about an action for it,
as we'll be intercepting submit events on the form and updating data via JavaScript. 
(It doesn't make sense to provide a non-JS fallback when you consider 
that a Meteor app is completely non-functional with JavaScript disabled).
これはシンプルなフォームです。私たちは　（action for it？）について心配する必要はありません。
これは（form？）で（submit events ？）を（intercepting？）して、JavaScriptでデータを更新するためです。
（？？？？？？？）

### Creating Posts

Let's bind an event handler to the form submit event.
It's best to use the submit event (rather than say a click event on the button),
as that will cover all possible ways of submitting (such as hitting enter in URL field for instance).
formのsubmit イベントに　イベントハンドラをバインドしていきましょう。
clickイベント（on the button？）よりもsubmitイベントを使うのがベストです。
それはsubmitイベントは　どのような投稿方法でもカバーするためです。
（たとえば、URLフィールドに（ hitting enter？）するようなものでも）

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    post._id = Posts.insert(post);
    Router.go('postPage', post);
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>

<%= commit "7-1", "Added a submit post page and linked to it in the header." %>

This function uses jQuery to parse out the values of our various form fields,
and populate a new post object from the results. 
We need to ensure we preventDefault on the event argument to our handler
to make sure the browser doesn't go ahead and try to submit the form.
この関数はさまざまな（form?）フィールドの値をはっきりさせるために　jQueryを使っています。　
また、その結果から新しい投稿オブジェクトを追加します（populate？）。
私たちは　ブラウザが　（doesn't go ahead and try to submit the form？）ための
イベントハンドラへの（event argument？）でpreventDefault　する必要があります。

Finally, we can route to our new post's page. 
The insert() function on a collection returns the generated id for the object that has been inserted into the database,
which the Router's go() function will use to construct a URL for us to browse to.
最終的に、私たちは新しい投稿ページにルーティングすることができました。
コレクションの　insert()関数 データベースに挿入されたオブジェクトに　生成されたidを返します。
（,which？）　ルーターの　go()関数は　　私たちがウェブで見るためのURLを構築します。（？？？）

The net result is the user hits submit, a post is created,
and the user is instantly taken to the discussion page for that new post.
その結果、　ユーザーは(submit？)にヒットして、投稿が作られて、
ユーザーは瞬時に　新しい投稿の　ディスカッションページ　に連れていきます。

### Adding Some Security

////

////

////

~~~bash
$ meteor remove insecure
~~~
<%= caption "Terminal" %>

////

### Allowing Post Inserts

////

~~~js
Posts = new Meteor.Collection('posts');

Posts.allow({
  insert: function(userId, doc) {
    // only allow posting if you are logged in
    return !! userId;
  }
});
~~~
<%= caption "collections/posts.js" %>
<%= highlight "3~8" %>

<%= commit "7-2", "Removed insecure, and allowed certain writes to posts." %>

////

////

////

<%= screenshot "7-2", "Insert failed: Access denied " %>

////

 - ////
 - ////
 - ////

////

### Securing Access To The New Post Form

////

////

////

~~~js
Router.configure({
  layoutTemplate: 'layout'
});

Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});

var requireLogin = function() {
  if (! Meteor.user()) {
    this.render('accessDenied');
    this.stop();
  }
}

Router.before(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "18~25" %>

////

~~~html
<template name="accessDenied">
  <div class="alert alert-error">You can't get here! Please log in.</div>
</template>
~~~
<%= caption "client/views/includes/access_denied.html" %>

<%= commit "7-3", "Denied access to new posts page when not logged in." %>

////

<%= screenshot "7-3", "The access denied template" %>

////

////

////

////

////

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});

var requireLogin = function() {
  if (! Meteor.user()) {
    if (Meteor.loggingIn())
      this.render(this.loadingTemplate);
    else
      this.render('accessDenied');
    
    this.stop();
  }
}

Router.before(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "16~19" %>

<%= commit "7-4", "Show a loading screen while waiting to login." %>

### Hiding the Link

////

~~~html
<ul class="nav">
  {{#if currentUser}}<li><a href="{{pathFor 'postSubmit'}}">Submit Post</a></li>{{/if}}
</ul>
~~~
<%= caption "client/views/includes/header.html" %>

<%= commit "7-5", "Only show submit post link if logged in." %>

////

### Meteor Method: Better Abstraction and Security

////

- ////
- ////
- ////

////

- ////
- ////
- ////

////

////

////

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    Meteor.call('post', post, function(error, id) {
      if (error)
        return alert(error.reason);
        
      Router.go('postPage', {_id: id});
    });
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>

////

////

~~~js
Posts = new Meteor.Collection('posts');

Meteor.methods({
  post: function(postAttributes) {
    var user = Meteor.user(),
      postWithSameLink = Posts.findOne({url: postAttributes.url});
    
    // ensure the user is logged in
    if (!user)
      throw new Meteor.Error(401, "You need to login to post new stories");
    
    // ensure the post has a title
    if (!postAttributes.title)
      throw new Meteor.Error(422, 'Please fill in a headline');
    
    // check that there are no previous posts with the same link
    if (postAttributes.url && postWithSameLink) {
      throw new Meteor.Error(302, 
        'This link has already been posted', 
        postWithSameLink._id);
    }
    
    // pick out the whitelisted keys
    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {
      userId: user._id, 
      author: user.username, 
      submitted: new Date().getTime()
    });
    
    var postId = Posts.insert(post);
    
    return postId;
  }
});
~~~
<%= caption "collections/posts.js" %>

<%= commit "7-6", "Use a method to submit the post." %>

////

////

////

////

////

////

////

### Sorting Posts

////

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find({}, {sort: {submitted: -1}});
  }
});
~~~
<%= caption "client/views/posts/posts_list.js" %>
<%= highlight "3" %>

<%= commit "7-7", "Sort posts by submitted timestamp." %>

////

////
