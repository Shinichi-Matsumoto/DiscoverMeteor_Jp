---
title: Pagination
slug: pagination
date: 0012/01/01
number: 12
contents: Learn more about Meteor's subscriptions, and how we can use them to control data.|Implement infinite-style pagination.|Use the `iron-router-progress` package to implement a nifty iOS-style progress bar.|Create a special subscription to deal with direct links to posts page.
paragraphs: 67
---

Things are looking great with Microscope, 
and we can expect a hit reception when it's released to the world.
　（Things are looking great with Microscope？）、
　世界に公開したら、私たちは　（hit reception？）を見込むことができます。

So we should probably think a little about the performance implication 
of the number of new posts that will be entered into the site as it takes off!
　そのため、私たちは（as it takes off？）時に、サイトの一部になる新しい投稿の数のパフォーマンス（ implication？）について少し考えるべきかもしれません。　　

We've spoken before about
how a client-side collection should contain a subset of the data on the server, 
and we've even managed to achieve this for our notification 
and comments collections.
　これまでに、どのようにクライアントサイドのコレクションが　サーバーのデータの一部を含めるのか説明しました。
　また、（notification と comments？）コレクションでも同じことを行いました。

At present though, we are still publishing all of our posts in one go, to all connected users. Eventually, if thousands of links are posted, this will become problematic. To solve this, we need to paginate our posts.
　しかし今のところ、まだ私たちは接続しているユーザーに対して、1回の投稿ですべてを  publish しています。

### Adding More Posts

First, in our fixture data, let's load up enough posts so that pagination actually makes sense:
　最初に、　ページネーションが実際に（make sense？＝意味をなす？）ように、
　（ fixture？）データに十分な投稿を詰め込みましょう。

~~~js
// Fixture data 
if (Posts.find().count() === 0) {

  //...
  
  Posts.insert({
    title: 'The Meteor Book',
    userId: tom._id,
    author: tom.profile.name,
    url: 'http://themeteorbook.com',
    submitted: now - 12 * 3600 * 1000,
    commentsCount: 0
  });
  
  for (var i = 0; i < 10; i++) {
    Posts.insert({
      title: 'Test post #' + i,
      author: sacha.profile.name,
      userId: sacha._id,
      url: 'http://google.com/?q=test-' + i,
      submitted: now - i * 3600 * 1000,
      commentsCount: 0
    });
  }
}
~~~
<%= caption "server/fixtures.js" %>
<%= highlight "15~24" %>

After running meteor reset, you should now get something like this:
　meteor reset を実行した後で、このようにすると（ get something？＝何かを得る？）ことでしょう。

<%= screenshot "12-1", "Displaying dummy data. " %>

<%= commit "12-1", "Added enough posts that pagination is necessary." %>

### Infinite Pagination

We'll be implementing an "infinite" style pagination. 
What we mean by that is that we'll first show, say, 10 posts on the screen, 
with a “load more” link pinned at the bottom. 
Clicking this link will add 10 more posts to the lists, and so on ad infinitum. 
This means we can control our entire pagination system 
with a single parameter representing the number of posts to display onscreen.
　私たちは"infinite"スタイルのページネーションを（implementing？）しています。
　この意味というのは、　私たちが　（ pinned at the bottom？）された“load more”リンクによって、
　最初にスクリーンに10個の投稿を（ show, say？）するということです。
　このリンクをクリックすると、さらに10個の投稿をリストに追加し、（so on ad infinitum？）
　つまり、私たちはスクリーンに表示するための投稿数を１つの引数で（representing？）することで、
　すべてのページネーションシステムを　コントロールできるということです。　

Now we'll need a way to tell the server about this parameter 
so that it knows how many posts to send up to the client. 
It so happens that we're already subscribing to the posts publication in the router, 
so we'll take advantage of this and let the router handle our pagination as well.
　この引数がサーバーに（it？）がどれだけの数の投稿をクライアントに　　　
　　（ send up ？）するかか識別できるように指示する
　方法が必要となります。
　（It so happens？）なので、私たちはすでに ルーター（in？＝によって？）posts publication に subscribe しています。
　そのため、私たちは　これを利用して、ルーターも　ページネーションを（handle？）できるようにします。

The easiest way to set this up is simply to make the posts limit parameter part of the path, 
giving us URLs of the form http://localhost:3000/25. 
An added bonus of using the URL over other methods is that 
if you are currently displaying 25 posts and happen to reload the browser window by mistake, 
you'll still be seeing 25 posts once the page loads again.
　これをセットアップするための最も簡単な方法は、
　投稿に　 path の引数部分を　制限させることです。
　http://localhost:3000/25の（form？）のURLを（giving us？）します。
　他のメソッドを（over？＝超えて？）URL を使うことの追加的なボーナスは、
　もし　あなたが現在25個の投稿を表示していて、誤ってブラウザーウィンドウをリロード（happen to？）するとしたら、
　まだ　ページが再びロードされても25個の投稿を見ている　ということです。

In order to do this properly, we'll need to change the way we subscribe to posts. 
Just like we previously did in the Comments chapter, 
we'll need to move our subscription code from the router level to the route level.
　これを正しく行うために、私たちは投稿に subscribe する方法を変える必要があります。
　以前に　Commentsの章で行ったように、
　私たちは　subscription コードを　ルーターレベルからルートレベルに移行する必要があります。

This might all be a lot to take in at once, 
but it will become clearer with the code.
　これは　一度に　多くのことを　（take？）するのかもしれませんが。
　コード（with？）きれいにします。

First, we'll stop subscribing to the posts publication in the Router.configure() block. 
Just delete Meteor.subscribe('posts'), leaving only the notifications subscription:
　最初に、私たちは　 Router.configure() ブロック内で  posts publication への subscribe を停止します。
　といっても、 Meteor.subscribe('posts') を削除するだけで、notifications subscription だけを残します。

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { 
    return [Meteor.subscribe('notifications')]
  }
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "5" %>


We'll then add a postsLimit parameter to the route's path. 
Adding a ? after the parameter name means that it's optional. 
So our route will not only match http://localhost:3000/50,
but also plain old http://localhost:3000.
　それから（a？） postsLimit引数をルートのパスに追加します。
　引数の名前の後に（a ?　？）を追加することは、（it's optional？）であることを意味しています。
　そのため、ルートは　http://localhost:3000/50　にマッチするだけでなく、
　（plain？）古い http://localhost:3000 にもマッチします。

~~~js
Router.map(function() {
  //...
  
  this.route('postsList', {
    path: '/:postsLimit?'
  });
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "5" %>


It's important to note that a path of the form /:parameter? will match every possible path. 
Since each route will be parsed successively to see if it matches the current path, 
we need to make sure we organize our routes in order of decreasing specificity.
　/:parameter?（form？）のパスが　すべての（ possible？）パスにマッチしているか着目することは重要です。
　各ルートは　（it？）が（current path？＝カレントパス？）にマッチしているかどうか見るためにうまく（be parsed ？）されるので、　
　私たちは（ decreasing specificity？）のためにルートを（organize？）する必要があります。

In other words, routes that target more specific routes like /posts/:_id should come first, 
and our postsList route should be moved to the bottom of the file 
since it pretty much matches everything,
　言い換えると、　/posts/:_id のような、より（ specific？）なルートを（target？）するルートは、最初に来るべきで、
　postsList ルートは　ファイルの（bottom？＝下層に？）移すべきです。
　というのは、（it？）はすべてにとてもマッチするためです。

It's now time to tackle the tough problem of subscribing and finding the right data. 
We need to deal with the case where the postsLimit parameter isn't present, 
so we'll assign it a default value. 
We'll use “5” to really give us enough room to play around with pagination.
　これから subscribe と 正しいデータを見つける上で、（tough？）な問題に取り掛かることなります。
　私たちはpostsLimit 引数が（present？）されていない場合に対処する必要があるので、
　私たちは　デフォルトの値を　（it？）に割り当てます。
　私たちは　ページネーションをいじくるための十分な余地を（really give us？）するために、“5”を使います。

~~~js
Router.map(function() {
  //..
  
  this.route('postsList', {
    path: '/:postsLimit?',
    waitOn: function() {
      var postsLimit = parseInt(this.params.postsLimit) || 5; 
      return Meteor.subscribe('posts', {sort: {submitted: -1}, limit: postsLimit});
    }
  });
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "6~9" %>

You'll notice we're now passing a JavaScript object ({limit: postsLimit}) 
along with the name of our posts publication. 
This object will serve as the options parameter for the server side Posts.find() statement. 
Let's switch over to our server-side code to implement this:
　 posts publication の名前と一緒に、私たちが
　JavaScript オブジェクト ({limit: postsLimit}) を引き渡していることにお気づきでしょう。
　このオブジェクトは　サーバーサイドの Posts.find() （statement？）への（options？）引数として（serve？）します。
　　　　このように（ implement？）して、サーバーサイドのコードを（switch over？）しましょう。

~~~js
Meteor.publish('posts', function(options) {
  return Posts.find({}, options);
});

Meteor.publish('comments', function(postId) {
  return Comments.find({postId: postId});
});

Meteor.publish('notifications', function() {
  return Notifications.find({userId: this.userId});
});
~~~
<%= caption "server/publications.js" %>
<%= highlight "1~3" %>

<% note do %>

### Passing Parameters

Our publications code is in effect telling the server
it can trust any JavaScript object sent by the client (in our case, {limit: postsLimit})
to serve as the find() statement's options. 
This makes it possible for users to submit any options they'd like via the browser console.
　publications コードは find()（statement's options？）として（serve？）するために、
（ in effect？＝効果的に？）　サーバーに
　クライアントから送られたどのようなJavaScriptオブジェクト（この場合は{limit: postsLimit}）でも（trust？）できる　
　ように指示を出しています。（？？？）
　これでブラウザーコンソールでユーザーが好きな（ submit any options？）することが　できるようになります。　　

In our case, this is relatively harmless, 
since all a user could do is reorder posts differently, 
or change the limit (which is what we want to enable in the first place).
　この場合、　これは比較的（harmless？）です。
　というのは、一人のユーザーがするすべてのことは（differently？）に投稿を　（reorder？）することだったり、
　（in the first place？）で（enable？）したい制限を変えることだからです。

But you shouldn't use this pattern when storing private data on unpublished fields, 
since the user could manipulate the fields option to access it, 
and you should probably also avoid using it 
for the find() statement's selector argument for the same security reasons.
　publish されていないフィールドでプライベートのデータを格納する時は、このパターンを使うべきではありません。
　それはユーザーが（ it？）にアクセスするために、フィールドのオプションに（manipulate？）できるためです。

A more secure pattern could be passing the individual parameters themselves 
instead of the whole object, to make sure you stay in control of your data:
　よりセキュアなパターンは　
　すべてののオブジェクトの代わりに、データの（stay in control of？）を（ make sure？）するために、
　個別の引数を（themselves？＝自体？）　に渡すことです。（？？？）

~~~js
Meteor.publish('posts', function(sort, limit) {
  return Posts.find({}, {sort: sort, limit: limit});
});
~~~

<% end %>

Now that we're subscribing at the route level, 
it would also make sense to set the data context in the same place. 
We'll deviate a bit from our previous pattern 
and make the data function return a JavaScript object
instead of simply returning a cursor. 
This lets us create a named data context, which we'll call posts.
　これでルートレベルで  subscribe しているので、
　同じ場所でデータコンテキストをセットする（ make sense？）します。
　私たちは　以前のパターンからそれて、
　シンプルにカーソルを返す代わりに
　データ関数に　JavaScript オブジェクトを返すようにします。　
　これで　（we'll call posts？）（named？）データコンテキストを作ることができます。

What this means is simply that
instead of being implicitely available as this inside the template, 
our data context will be available at posts. 
Apart from this small element, the code should feel familiar:
　これは　単純に
　テンプレートの中で（ this？）として　間接的に利用できる　代わりに、
　データコンテキストが（ posts？）で利用できるということです。

~~~js
Router.map(function() {
  this.route('postsList', {
    path: '/:postsLimit?',
    waitOn: function() {
      var limit = parseInt(this.params.postsLimit) || 5; 
      return Meteor.subscribe('posts', {sort: {submitted: -1}, limit: limit});
    },
    data: function() {
      var limit = parseInt(this.params.postsLimit) || 5; 
      return {
        posts: Posts.find({}, {sort: {submitted: -1}, limit: limit})
      };
    }
  });
  
  //..
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "8~13" %>

Now that we're setting the data context at the router level 
we can safely get rid of the posts template helper inside the posts_list.js file. 
And since we named our data context posts
 (the same name as the helper), 
we don't even need to touch our postsList template!
　ルートレベルでデータコンテキストをセットしたので、
　posts_list.js ファイル内の posts テンプレートヘルパーを安全に取り除くことができます。　
　私たちはデータコンテキストをヘルパーと同じ名前のpostsと名づけたので、
　私たちは postsList テンプレートを触る必要がありません。　　

Let's recap. Here's what our new and improved router.js code should look like:
　（Let's recap？）
　新しく改良した router.js コードはこのようになっています：

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { 
    return [Meteor.subscribe('notifications')]
  }
});

Router.map(function() {
  //...

  this.route('postsList', {
    path: '/:postsLimit?',
    waitOn: function() {
      var limit = parseInt(this.params.postsLimit) || 5; 
      return Meteor.subscribe('posts', {sort: {submitted: -1}, limit: limit});
    },
    data: function() {
      var limit = parseInt(this.params.postsLimit) || 5; 
      return {
        posts: Posts.find({}, {sort: {submitted: -1}, limit: limit})
      };
    }
  });
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "5, 11~21" %>

<%= commit "12-2", "Augmented the postsList route to take a limit." %>

Let's give our brand new pagination system a try. 
We now have the ability to display an arbitrary number of posts 
on the homepage simply by changing the URL parameter.
For example, try accessing http://localhost:3000/3. 
You should now see something like this:
　（ our brand？）に新しいページネーションシステムを与えてみましょう。
　ホームページで URL のパラメータを変えることで
　好きなように投稿数を表示することができます。
　例として、http://localhost:3000/3 にアクセスしてみましょう。
　このように見えているはずです：
　
<%= screenshot "12-2", "Controlling the number of posts on the homepage. " %>

<% note do %>

### Why Not Pages?

Why are we using an “infinite pagination” approach 
instead of showing successive pages with 10 posts each, 
like what Google does for search results? 
This is actually due to the real-time paradigm embraced by Meteor.
　なぜ私たちはGoogleの検索結果ページのように
　10個の投稿ごとに　次のページを表示するのではなく、
　 “infinite pagination”アプローチを使っているのでしょうか。

Let's imagine we are paginating our Posts collection 
using the Google results pagination pattern, 
and that we're currently on page 2, 
which shows posts 10 to 20. 
What happens if another users deletes any of the previous 10 posts?
　
　　Googleの検索結果ページネーションパターンを使って、Posts コレクションを（paginating？＝ページを作成する？）ことを想像しましょう。
　そして、10番目から20番目の投稿を表示する2ページ目にいるとします。
　もし他のユーザーが　（ any of the previous 10 posts？＝1ページ目の10個の投稿のどれかを）削除したとしたら、どうなるのでしょうか？
　
Since our app is real-time, our dataset would change. 
Post 10 would now become post 9, and drop out of our view, 
while post 11 would now be in range. 
The end result would be that the user would suddenly see their posts change for no apparent reason!
　このアプリはリアルタイムなので、データセットが変化します。
　（Post 10 ？）は今、（ post 9？）になり、（drop out of our view？）します。
　（post 11？）が（in range？＝範囲内？）となります。
　最終的に、　ユーザーは
　（no apparent reason？＝目に見えない理由で？）
　　急に　投稿の変化を見ることになります。

Even if we tolerated this UX quirk, 
traditional pagination is also hard to implement for technical reasons.
　たとえ私たちが　このUX の（quirk？＝特異な行動）を我慢したとしても、
　従来のページネーションは　技術的な理由で　実行することが難しいです。

Let's go back to our previous example. 
We're publishing posts 10 to 20 from the Posts collection, 
but how would you find those posts on the client? 
You can't pick posts 10 to 20, 
as there are only ten posts altogether in the client-side data set.
　先ほどの例に戻りましょう。
　私たちは　10 から 20 の投稿を Posts コレクションから publish しています。　
　しかし、クライアントでのこうした投稿を、あなたはどのようにして見つけるのでしょうか？（？？？）
　クライアントサイドのデータセット（in？＝の中に？）全体で10個の投稿しかないので、あなたは10から20の投稿を取得することはできません。

One solution would simply be to publish those 10 posts on the server, 
and then do a Posts.find() client-side to pick up all published posts.
　１つの解決策はサーバーで10個の投稿をパブリッシュすることで、
　そのときにパブリッシュされたすべての投稿を取り出すためにPosts.find() クライアントサイドを行います。（？？？）

This works if you only have a single subscription. 
But what if you start to have more than one post subscription, as we'll do soon?
　もしあなたが　１つだけの subscription を（have？＝する？）としたら、
　これはうまくいきます。　
　しかし、（as we'll do soon？）、もし　１つの投稿サブスクリプションをより多く（have？）するとしたら、どうなるのでしょうか？

Let's say one subscription asks for posts 10 to 20, 
and another one for posts 30 to 40. 
You now have 20 posts loaded client-side in total, 
with no way of knowing which ones belong to which subscription.
　仮に　１つの subscription が posts 10から 20 に （ asks for？）
　（and another one for posts 30 to 40. ？）
　　今は　どの（ones？＝投稿？）がどの subscriptionに属しているか識別せずに
　　全体で20個の投稿がクライアントサイドで読み込まれました。
　

For all these reasons, traditional pagination just doesn't make much sense when working with Meteor.
　以上のような理由から、Meteorと連携している時に従来のページネーションはあまり意味をなさないのです。

<% end %>

### Creating a Route Controller

You might have noticed that we're repeating the var limit = parseInt(this.params.postsLimit) || 5; line twice.
 Plus, hard-coding the number “5” isn't exactly ideal. 
This is not the end of the world, 
but since it's always better to follow the DRY (Don't Repeat Yourself) principle if you can, 
let's see how we can refactor things a bit.
　 var limit = parseInt(this.params.postsLimit) || 5;（ line？）を2度繰り返していることにお気づきかもしれません。
　さらに、数字の “5” を ハードコーディングすることは　理想的ではありません。
　これはそれほど深刻なことではありませんが、
　できればDRY (Don't Repeat Yourself) 原則に従うのがよいので、
　どのようにリファクタリングするのか少し見ていきましょう。

We'll introduce a new aspect of Iron Router, Route Controllers. 
A route controller is simply a way to group routing features together 
in a nifty reusable package that any route can inherit from. 
Right now we'll only use it for a single route, 
but you'll see in the next chapter how this feature will come in handy.
　ここで Iron Router の新しい機能、ルートコントローラを紹介します。
　ルートコントローラはルーティング機能をどんなルートでも引き継いで、再利用可能で素晴らしいパッケージにまとめるためのシンプルな方法です。
　ここでは１つのルートにルートコントローラを使いますが、
　次の章ではこの機能がいかに役立つのか見ていきます。

~~~js
PostsListController = RouteController.extend({
  template: 'postsList',
  increment: 5, 
  limit: function() { 
    return parseInt(this.params.postsLimit) || this.increment; 
  },
  findOptions: function() {
    return {sort: {submitted: -1}, limit: this.limit()};
  },
  waitOn: function() {
    return Meteor.subscribe('posts', this.findOptions());
  },
  data: function() {
    return {posts: Posts.find({}, this.findOptions())};
  }
});

Router.map(function() {
  //...

  this.route('postsList', {
    path: '/:postsLimit?',
    controller: PostsListController
  });
});
~~~
<%= caption "lib/router.js" %>

Let's go through step. 
First, we're creating our controller by extending RouteController. 
We then set the template property just like we did before, 
and then a new increment property.
　一つ一つ見ていきましょう。
　最初に、RouteController を拡張してコントローラを作ります。
　それから以前行ったように、template プロパティをセットして、
　その次に新たに increment プロパティをセットします。

We then define a new limit function which will return the current limit, 
and a findOptions function which will return an options object. 
This might seem like an extra step, but we'll make use of it later on.
　新たに現在の上限を返す limit 関数と
　（ options ？）オブジェクトを返す findOptions 関数を定義します。
　これは余分なステップのように見えるかもしれませんが、後々これを利用します。

Next, we define our waitOn and data functions just like before, 
except they're now making use of our new findOptions function.
　次に以前と同じように waitOn関数 と data 関数を定義します。
　ただし、（ they？）が新しく利用している findOptions 関数は除きます。

The last thing to do is to tell the postsList route to route to our brand new controller, 
with the controller property.
　最後にすることは、postsList ルートに新しい区分であるコントローラをルーティングするように規定します。（？？？）

<%= commit "12-3", "Refactored postsLists route into a RouteController." %>

### Adding A Load More Link

We have a working pagination, and our code is looking good. 
There's just one problem: 
there's no way to actually use that pagination except by changing the URL manually. 
This definitely doesn't make for great user experience, so let's get to work on fixing this.
　ページネーションは動作しているので、コードは良さそうに見えます。
　１つだけ問題があります：
　ページネーションを実際に使うには、URL を手動で変えるしかありません。
　これではユーザーエクスペリエンスに全く役立ちません。
　そのため、この修正に取り掛かりましょう。

What we want to do is simple enough. 
We'll add a “load more” button at the bottom of our posts list, 
which will increment the number of posts currently displayed by 5 every time it's clicked. 
So if I'm currently on the URL http://localhost:3000/5, 
clicking “load more” should bring me to http://localhost:3000/10. 
If you've made it this far in the book, we trust you can handle a little arithmetic!
　私たちがやりたいことはシンプルです。
　投稿リストの下に “load more” ボタンを追加して　
　クリックされるごとに、
　現在表示されている投稿の数値を５増加させます。
　　つまり、私が現在 http://localhost:3000/5 にいるとしたら、
　　“load more”ボタンを押すと、私は http://localhost:3000/10 に移動します。
　　ここまで読み進めた方だったら、このちょっとした算数ができるはずです！

As before, we'll add our pagination logic in our route. 
Remember when we explicitely named our data context rather than just use an anonymous cursor? 
Well, there's no rule that says the data function can only pass cursors, 
so we'll use the same technique to generate the URL of our “load more” button.
　すでに述べたように、ルートにページネーションロジックを追加します。
 　無名のカーソルを使うのではく、はっきりとデータコンテキストを（named？）した時（Remember when？）？
（Well）、data 関数だけがカーソルを渡すことができる（says？）するルールはないので、“load more” ボタンのURLを作るための同じ技術を使います。（？？？）
　
~~~js
PostsListController = RouteController.extend({
  template: 'postsList',
  increment: 5, 
  limit: function() { 
    return parseInt(this.params.postsLimit) || this.increment; 
  },
  findOptions: function() {
    return {sort: {submitted: -1}, limit: this.limit()};
  },
  waitOn: function() {
    return Meteor.subscribe('posts', this.findOptions());
  },
  posts: function() {
    return Posts.find({}, this.findOptions());
  },
  data: function() {
    var hasMore = this.posts().fetch().length === this.limit();
    var nextPath = this.route.path({postsLimit: this.limit() + this.increment});
    return {
      posts: this.posts(),
      nextPath: hasMore ? nextPath : null
    };
  }
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "16~23" %>

Let's take a deeper look at this bit of router magic. 
Remember that the postsList route 
(which will inherit from the PostsListController controller we're currently working on) 
takes a postsLimit parameter.
　このルーターマジックについて、さらに深く見ていきましょう。
　 私たちが現在取り組んでいる PostsListController コントローラーから引き継がれたpostsList ルートがpostsLimit 引数をとることを思い出しましょう。

So when we feed
 {postsLimit: this.limit() + this.increment} to this.route.path(), 
we're telling the postsList route 
to build its own path using that JavaScript object as data context.
　{postsLimit: this.limit() + this.increment} to this.route.path()を入力した時、
　私たちはデータコンテキストとしての JavaScript オブジェクトを使って、postsList ルートに（ its own ？）パスを作るように命令しています。
　
In other words, this is exactly the same thing as using the {{pathFor 'postsList'}} Spacebars helper,
 except we're replacing the implicit this by our own custom-made data context.
 言い換えると、（our own？）カスタムメイドのデータコンテキスト
よって暗黙的な this を取り替えることを除いて、　
　これはまさに {{pathFor 'postsList'}}　ヘルパーを使うことと同じことです。
　　

We're taking that path and adding it to the data context for our template, 
but only if there are more posts to display. 
The way we do that is a bit tricky.
　私たちは　パスを取って、テンプレートで（it？＝パスを）データコンテキストに追加していますが、
　（only if？）表示するべき投稿がたくさんあるとしたら。（？？？）
　これをするための方法は少し（tricky？）です。

We know that this.
limit() returns the current number of posts we'd like to show, 
which can either be the value in the current URL, or our default value (5) 
if the URL doesn't contain any parameter.
　（We know that this？）。
　現在のURLがどんな引数も含んでいない場合、
　limit()　は私たちが表示したい現在の投稿数を返します。
　それは現在のURLの値か、デフォルトの値(5)です。
　

On the other hand, this.posts refers to the current cursor, 
so this.posts.count() refers to the number of posts that are actually in the cursor.
　他方で、this.posts は現在のカーソルを参照するので、
　this.posts.count()は　実際にカーソルの中の　投稿数を参照します。　

So what we're saying here is that if we ask for n posts and we get n back, 
we'll keep showing the “load more” button. 
But if we ask for n and we get less than n back, 
then it means we've hit the limit and we should stop showing that button.
　ここで私たちが言っていることは、もし私たちが n posts を要求して n を戻すと、
　“load more”ボタンを表示し続けるということです。
　（hit the limit？）するという意味で、私たちはそのボタンの表示をストップすべきです。

That being said, our system fails in one case: 
when the number of items in our database is exactly n. 
If that happens, the client will ask for n posts and get n posts back 
and keep showing the “load more” button, 
unaware that there are no more items left.
　（That being said？）、このシステムは
　データベース内の（items？）の数がまさに n である時に失敗します。
　（If that happens？）、クライアントは n 投稿を要求して、 n 投稿を戻してして、
　“load more"ボタンを表示し続けます。
　何も（items？）が残っていないと気づきません。

Sadly, there are no simple workarounds to this problem, 
so for now we'll have to settle with this less-than-perfect implementation.
　残念なことに、この問題に単純な次善策はないので、
　今のところ私たちはこの完全でない実装を解決する必要があります。　

All that's left to do is to add the “load more” link at the bottom of our posts list, 
making sure to only show it 
if we actually have more posts to load:
　もしさらに投稿をロードさせるとしたら、
　するために残されていることは投稿リストのボタンの下に“load more”リンクを追加して（it ？＝このリンク？）だけをを表示します。

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
    
    {{#if nextPath}}
      <a class="load-more" href="{{nextPath}}">Load more</a>
    {{/if}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>
<%= highlight "7~10" %>

Here's what your post list should now look like:
これで投稿リストは現在このようになっているはずです：


<%= screenshot "12-3", "The “load more” button. " %>

<%= commit "12-4", "Added nextPath() to the controller and use it to step through posts." %>

<% note do %>


<% end %>

### A Better Progress Bar

Our pagination is now working properly, 
but it suffers from an annoying quirk: 
every time we click “load more” and the router asks for more posts, 
we're sent to the loading template while we wait for the new data to come in. 
The result is that we're sent back to the top of the page every time 
and need to scroll all the way back down to resume our browsing.
　これまで作ったページネーションは今、正しく動いていますが、
　（ annoying quirk？）に（suffers from？＝苦しみ？）ます。

It would be much, much better 
if we could stay on the same page all throughout the operation, 
while still providing some kind of indication that new data is currently being loaded. 
Thankfully, that's precisely what the iron-router-progress package is for.
　（while still providing some kind of indication  ＝新しいデータを現在読み込んでいることを示す間？）
　操作をしている間はずっと同じページに留まれば、
　（It？）はさらにさらに良くなるでしょう。 
　ありがたいことに、これはまさに iron-router-progressパッケージが（is for？）なことです。

Similar to iOS's Safari or sites like Medium and YouTube, 
iron-router-progress adds a thin loading bar at the top of the screen. 
Implementing it is as easy as adding the package to your app:
　 iOSの Safari や Medium、 YouTube といったサイトと同様に、
　iron-router-progress は スクリーンの一番上に細いローディングバーを追加します。
　これを実装するにはアプリにパッケージを追加するのと同じくらい簡単です：

~~~bash
meteor add mrt:iron-router-progress
~~~
<%= caption "bash console" %>

Through the magic of smart packages, 
our new progress indicator will work perfectly right out of the box! 
The progress bar will activate for each route, 
and automatically complete once the route's required data is done loading.
　スマートパッケージの魔法で、
　新しい（progress indicator＝プログレスバー？）はそのままの状態で完全に正しく動きます！
　プログレスバーは　各ルートでも有効で、
　ルートがの要求したデータがロードを終えると、自動的に完了します。　

We'll just do a single tweak. 
Let's disable iron-router-progress for the postSubmit route 
since it doesn't need to wait for any subscription data (after all, it's just an empty form):
　１つだけ調整します。
　iron-router-progress を postSubmit ルートで使えなくしましょう。
　というのは、（it＝iron-router-progress ？）はサブスクリプションデータを待つ必要がないためです。（結局は、空っぽの（form＝フォーム？）です。）

~~~js
Router.map(function() {
 
  //...
  
  this.route('postSubmit', {
    path: '/submit',
    disableProgress: true
  });
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "7" %>

<%= commit "12-5", "Use the iron-router-progress package to make pagination nicer." %>

### Accessing Any Post

We're currently loading the five newest post by default, 
but what happens once someone browses to a post's individual page?
　私たちは現在、デフォルトで最新の５つの投稿をロードしていますが、
　投稿の個別ページを見たい人がいたらどうなるでしょうか？

<%= screenshot "12-4", "An empty template." %>

If you try it, you'll be faced with an empty post template. 
This makes sense: 
we've told the router to subscribe to the posts publication 
when loading the postsList route, 
but we haven't told it what to do about the postPage route.
　これを試すと、空っぽの投稿テンプレートに出くわします。
　これはこういうことです：
　postsLis ルートをロードする時に、　
　私たちはルーターが posts パブリケーションにサブスクライブするように指示を出しています。
　しかし、私たちは postPage ルートに何をするのか指示を出しませんでした。。

But so far, all we know how to do is subscribe to a list of the n latest posts. 
How do we ask the server for a single specific post? 
We'll let you in on a little secret here: 
you can have more than one publication for each collection!
　しかし、今までで私たちが　行う方法のすべては n の最新の投稿リストにサブスクライブすることです。
　では、サーバーに１つの特定の投稿を要求するにはどうしたら良いのでしょうか？
　ここでちょっとした秘密を（let you in？＝教え？）ましょう：
　あなたは　各コレクションに対して１つ以上のパブリケーションを持つことができます！　

So to get our missing posts back, 
we'll simply make a new, separate singlePost publication 
that only publishes one post, identified by _id.
　行方不明の投稿を取り戻すために、
　新たに独立した singlePost パブリケーションを作ります。
　これは_idで識別して１つの投稿だけをパブリッシュします。

~~~js
Meteor.publish('posts', function(options) {
  return Posts.find({}, options);
});

Meteor.publish('singlePost', function(id) {
  return id && Posts.find(id);
});
~~~
<%= caption "server/publications.js" %>
<%= highlight "5~7" %>

Now, let's subscribe to the right posts client-side. 
We were already subscribing to the comments publication on the postPage route's waitOn function, 
so we can simply add the subscription to singlePost in there. 
And let's not forget to also add our subscription to the postEdit route, 
since it also needs the same data:
　さあ、　（right posts？）クライアントサイドにサブスクライブしましょう。
　私たちはすでに　postPageルートの waitOn関数に　comments パブリケーションをサブスクライブしています。
　そのため、（there？）でsinglePostにサブスクリプションを簡単に追加できます。
　postEdit ルートへの subscription を追加することを忘れずに。
　というのは、postEdit ルートも同じデータが必要だからです。
　
~~~js
Router.map(function() {

  //...
    
  this.route('postPage', {
    path: '/posts/:_id',
    waitOn: function() {
      return [
        Meteor.subscribe('singlePost', this.params._id),
        Meteor.subscribe('comments', this.params._id)
      ];
    },
    data: function() { return Posts.findOne(this.params._id); }
  });

  this.route('postEdit', {
    path: '/posts/:_id/edit',
    waitOn: function() { 
      return Meteor.subscribe('singlePost', this.params._id);
    },
    data: function() { return Posts.findOne(this.params._id); }    
  });
  
  /...

});
~~~
<%= caption "lib/router.js" %>
<%= highlight "7~12,18~20" %>

<%= commit "12-6","Use a single post subscription to ensure that we can always see the right post." %>

With pagination done, our app no longer suffers from scaling problems, 
and users are sure to contribute even more links than before. 
So wouldn't it be nice to have a way to somehow rank those links? 
This is precisely the topic of the next chapter, Voting.
　ページネーションが完了すると、このアプリはスケーリングの問題に苦しむことはありません。
　そのため、ユーザーは以前よりも多くのリンクを投稿することでしょう。
　では、こうしたリンクにどうにかしてランク付けする良い方法はないものでしょうか？
　次の章のトピックはまさに、Votingです。

