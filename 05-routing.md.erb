---
title: Routing
slug: routing
date: 0005/01/01
number: 5
contents: Meteorでのルーティングを学びます。.| 固有のURLで投稿ディスカッションページを作ります。（？？？）|どうやって適切にURLをリンクするのか学習します。
paragraphs: 72
---

Now that we have a list of posts (which will eventually be user-submitted),
　今のところ、投稿の一覧表ができたので（最終的にはユーザーが投稿するようにします）、
we need an individual post page where our users will be able to discuss each post.
　ユーザー同士で投稿を議論できる個別の投稿ページが必要です。

We'd like these pages to be accessible via a permalink, 
a URL of the form http://myapp.com/posts/xyz (where xyz is a MongoDB _id identifier) that is unique to each post.
 このページをパーマリンクを通じて、アクセスできるようにしたいと思います。　
 パーマリンクとは http://myapp.com/posts/xyz の形をした URL で、それぞれの投稿は固有のものです。（ xyz の部分は MongoDB の _id 識別子です）

This means we'll need some kind of routing to look at what's inside the browser's URL bar
and display the right content accordingly.
　ブラウザーの URL バーの中に何があるのか調べてそれに対応して正しいコンテンツを表示するために、何らかのルーティングが必要となります。

### Iron Router パッケージを入れる

Iron Router is a routing package that was conceived specifically for Meteor apps.
Iron Router は Meteor アプリのルーティングに特化したパッケージです。

Not only does it help with routing (setting up paths), 
but it can also take care of filters (assigning actions to some of these paths) 
and even manage subscriptions (control which path has access to what data).
(Note: Iron Router was developed in part by Discover Meteor co-author Tom Coleman.)
　Iron Router はルーティング（パスの設定）に役立つだけではなく、
　設定をしたパスにアクションを割り当てるフィルターも処理します。
　さらに、どのパスがどんなデータにアクセスするのか制御するサブスクリプションも扱います。
　（注釈：Iron Router の一部は Discover Meteor の著者の一人であるトム・コールマンによって開発されました。）


First, let's install the package from Atmosphere:
最初に、Atmosphere からパッケージをインストールしましょう。

~~~bash
$ meteor add iron:router
~~~
<%= caption "Terminal" %>

This command downloads and installs the iron-router package into our app, ready to use. 
Note that you might sometimes need to restart your Meteor app 
(with ctrl+c to kill the process, then meteor to start it again) before a package can be used.
　このコマンドで iron-router パッケージをアプリにダウンロードしてインストールをしたので、すぐに使える状態となります。
　パッケージを使えるようになる前に Meteor アプリを再起動する必要があるかもしれません。
（ctrl+c でプロセスを中止して、再び起動するために meteor を入力します。）

<% note do %>

### Router Vocabulary　ルーティング用語集

We'll be touching on a lot of different features of the router in this chapter. 
If you have some experience with a framework such as Rails, 
you'll already be familiar with most of these concepts.
But if not, here's a quick glossary to bring you up to speed
　この章では、ルーティングに関する様々な機能を学びます。
　もしあなたが Rails などのフレームワークの経験があるなら、
　ルーティングの概念についてすでに知っていることでしょう。
　もしそうでなければ、ここでちょっとした用語集を用意しました。

Routes: A route is the basic building block of routing.
It's basically the set of instructions that tell the app where to go and what to do when it encounters a URL.
- ルート：ルートとは、ルーティングの基本的な構成要素です。
　　　　アプリが URL を見つけたら、どこに行って、何をしたらよいかといった基本的な命令がセットになったものがルートです。

Paths: A path is a URL within your app. 
It can be static (/terms_of_service) or dynamic (/posts/xyz), 
and even include query parameters (/search?keyword=meteor).
- パス：パスとはアプリ内での URL のことです。パスは静的な(/terms_of_service) や動的な(/posts/xyz)、 (/search?keyword=meteor)といったクエリパラメータもあります。

Segments: The different parts of a path, delimited by forward slashes (/).
- セグメント：パスの様々なパーツのことで、前のスラッシュ（/）で区切られています。

Hooks: Hooks are actions that you'd like to perform before, after, or even during the routing process. 
A typical example would be checking if the user has the proper rights before displaying a page.
- フック：フックとはルーティングプロセスの前や後、あるいはルーティングプロセス中に実行させるアクションです。
　　　　　代表的な例として、ページを表示する前にユーザーが適切な権利を持っているか照合することが挙げられます。

Filters: Filters are simply hooks that you define globally for one or more routes.
- フィルター：フィルターとは、一つ以上のルートをグローバルに定義するフックです。　　

Route Templates: Each route needs to point to a template. 
If you don't specify one, the router will look for a template with the same name as the route by default.
- ルートテンプレート： 各ルートはテンプレートを指し示す必要があります。
　テンプレートを指定していない場合、ルーターはデフォルトでルートと同じ名前のテンプレートを探します。

Layouts: You can think of layouts as one of those digital photo frames. 
They contain all the HTML code that wraps the current template, and will remain the same even if the template changes.
- レイアウト：レイアウトとは、デジタルフォトフレームのようなものだと捉えることができます。
　レイアウトはカレントテンプレートをラップするすべての HTML コードを組み入れ、
　テンプレートが変化しても同じ状態を保ちます。　　

Controllers: Sometimes, you'll realize that a lot of your templates are reusing the same parameters. 
Rather than duplicate your code, 
you can let all these routes inherit from a single routing controller which will contain all the routing logic.
- コントローラ：時々、多くのテンプレートが同じパラメータで再利用できることに気づくでしょう。
　コードを重複させるのではなく、ルーティングロジックをすべて含んだ１つのルーティングコントローラで
　ルートを継承することができます。

For more information about Iron Router, check out the full documentation on GitHub.
Iron Router に関する詳細は、GitHub 上のドキュメンテーションで全文を見ることができます。

<% end %>

### Routing: Mapping URLs To Templates  テンプレートに URL を割り当てる

So far, we've built our layout using hard-coded template includes (such as {{>postsList}}). 
So although the content of our app can change,the page's basic structure is always the same:
 a header, with a list of posts below it.
今まで、{{>postsList}} のようにハードコードされたテンプレートのインクルードを使ってレイアウトを作ってきました。
そのため、アプリの内容は変化できますが、ページの基本的な構造は常に同じです：
つまり、ヘッダーと投稿の一覧表です。

The Iron Router lets us break out of this mold by taking over what renders inside the HTML <body> tag.
So we won't define that tag's content ourselves, as we would with a regular HTML page. 
Instead, we will point the router to a special layout template that contains a {{> yield}} template helper.
　Iron Router が HTML の <body> タグの中をレンダリングしたものを引き継ぐことで、私たちはこの骨組みから抜け出すことができます。
　そのため、私たちは通常の HTML ページのようにタグの中を自ら定義をしません。
　その代わりに、{{> yield}} テンプレートヘルパーを持つ特別なレイアウトテンプレートをルーターに指定します。

This {{> yield}} helper will define a special dynamic zone that
will automatically render whichever template corresponds to the current route
(as a convention, we'll designate this special template as the “route template” from now on):
　この {{> yield}} ヘルパーは特別な動的な範囲を定義します。
　動的な部分ではカレントルートに対応するあらゆるテンプレートに自動的にレンダリングします。
（私たちは今後からこの特別なテンプレートを「ルートテンプレート」と指定します。）

<%= diagram "router-diagram", "レイアウトとテンプレート.", "pull-center" %>

We'll start by creating our layout and adding the {{> yield}} helper. 
First, we'll remove our HTML <body> tag from main.html, and move its contents to their own template, layout.html.
ではレイアウトを作って {{> yield} } ヘルパーを追加してみましょう。
はじめに、main.html から HTML の <body> タグの中身を layout.htmlの中のテンプレートに移動させます。

So our slimmed down main.html now looks like this:
すると、スリムになった main.html は現在このようになっています。

~~~html
<head>
  <title>Microscope</title>
</head>
~~~
<%= caption "client/main.html" %>

While the newly created layout.html will now contain the app's outer layout:
新しく作った layout.html は現在、アプリの外側のレイアウトを組み入れています。

~~~html
<template name="layout">
  <div class="container">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="brand" href="/">Microscope</a>
    </div>
  </header>
  <div id="main" class="row-fluid">
    {{> yield}}
  </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>

You'll notice we've replaced the inclusion of the postsList template with a call to yield helper. 
You'll notice that after this change, we see nothing on the screen. 
This is because we haven't told the router what to do with the / URL yet, so it simply serves up an empty template.
　postsList テンプレートを yield ヘルパーの呼び出しに差し替えたことに気づいたことでしょう。
　また、その変更後はスクリーン上になにもないことにお気づきかと思います。
　これはまだルーターに / URL で何を処理するか指定していないためです。
　そのため、（it＝ルーター？）は空っぽのテンプレートを出力しています。

To begin, we can regain our old behavior by mapping the root / URL to the postsList template.
We'll create a /lib directory at our project's root, and inside it create router.js :
　はじめに、postsList テンプレートに/ URL ルートを割り当てて、以前と同じ状況にします。。
　ルートのプロジェクトで /lib directory を作って、その中に router.js を作ります。

~~~js
Router.configure({
  layoutTemplate: 'layout'
});

Router.map(function() {
  this.route('postsList', {path: '/'});
});
~~~
<%= caption "lib/router.js"%>

We've done two important things. 
First, we've told the router to use the layout we just created as the default layout for all routes.
Second, we've defined a new route called postsList and mapped it to the / path.
　これで２つの大事なことを行いました。
　１つ目は、私たちが作ったデフォルトのレイアウトをすべてのルートで使うことをルーターに指定しました。
　２つ目は、postsList という名前の新しいルートを定義して、/ パスを割り当てました。

<% note do %>

### The `/lib` folder

Anything you put inside the /lib folder is guaranteed to load first before anything else in your app
(with the possible exception of smart packages).
This makes it a great place to put any helper code that needs to be available at all times.
 /lib フォルダ内に置いたものは、何よりも前に最初に読み込まれることが保証されています。
（スマートパッケージは例外です）
そのため、/lib フォルダはヘルパーコードを置く場所として最適です。ヘルパーコードは常に有効とする必要があるためです。

A bit of warning though: note that since the /lib folder is neither inside /client or /server,
this means its contents will be available to both environments.
しかし、注意点が１つあります。 /lib フォルダは /client 、/server 内のどちらにもないので、
/lib フォルダの中のコードはどちらの環境でも有効化されるということに気をつけましょう。

<% end %>

### Named Routes

Let's clear up a bit of ambiguity here. 
We named our route postsList, but we also have a template called postsList. So what's going on here?
　ここで少しあいまいな点をクリアにしましょう。
　私たちはルートに postsList と名付けましたが、postsList という名前のテンプレートもあります。
　すると、どんなことが起こるでしょうか。

By default, Iron Router will look for a template with the same name as the route. 
In fact, it will even look for a path based on the route name, 
meaning that if we hadn't defined a custom path (which we did by providing a path option in our route definition), 
our template would've been accessible at URL /postsList by default.
　デフォルト状態だと、 Iron Router はルートと同じ名前のテンプレートを探します。
　実際には、ルートの名前に基づいてパスを探します。
　ルートの定義にパスのオプションを与えたカスタムパスを定義していない場合、
　テンプレートはデフォルトで /postsList の URL でアクセスできるということです。

You may be wondering why we even need to name our routes in the first place.
Naming routes lets us use a few Iron Router features that make it easier to build links inside our app.
The most useful one is the {{pathFor}} Spacebars helper, which returns the URL path component of any route.
　そもそも、なぜでルートに名前をつける必要があるのでしょうか。
　それはルートに名前を付けることで、簡単にアプリ内のリンクを作る Iron Router の機能を使うためです。　
　最も役立つ機能は {{pathFor}} という Spacebars ヘルパーです。これはあらゆるルートの URL パスの構成要素を返します。

We want our main home link to point us back to the posts list, 
so instead of specifying a static / URL, we can also use the Spacebars helper.
The end result will be the same,
but this gives us more flexibility since the helper will always output the right URL even if we change the route's path in the router.
メインホームリンクが投稿のリストを返すようにしたいので、
静的な / URL を指定する代わりに、Spacebars ヘルパーを使います。
最終的な結果は同じとなりますが、ルーターでルートのパスを変えたとしてもヘルパーは常に正しい URL を出力するため、
私たちはフレキシビリティを得ることができます。

~~~html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
  </div>
</header>

//...
~~~
<%= caption "client/views/application/layout.html"%>
<%= highlight "3" %>

<%= commit "5-1", "Very basic routing." %>

### Waiting on Data

If you deploy the current version of the app (or launch the instance using the link above), 
you'll notice that the list appears empty for a few moments before the posts appear. 
This is because when the page first loads, 
there are no posts to display until the posts subscription is done grabbing the post data from the server.
　もし現在の状態のアプリをデプロイしたら（あるいは上記のリンクを使ってインスタンスをローンチしたら）、
　投稿が現れる前のわずかな間はリストの中身がないことに気づくことだと思います。
　これはページが最初に読み込まれるときは posts サブスクリプションがサーバーから投稿データを取ってくるまでの間に表示する投稿がないためです。

It would be a much better user experience to provide some visual feedback that something is happening, 
and that the user should wait a moment.
　ユーザーに何が起きているのかという視覚的なフィードバックを与えることができれば、よりよいユーザーエクスペリエンスとなって、ユーザーは少しの間待ってくれることでしょう。

Luckily, Iron Router gives us an easy way to do that -- we'll waitOn the subscription:
幸運なことに、Iron Router にはそうするための簡単な方法があります。　waitOn サブスクリプションです。

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.map(function() {
  this.route('postsList', {path: '/'});
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "3,4" %>

Let's break things down. 
First, we've modified the Router.configure() block to provide the router
with the name of a loading template (which we'll create soon) 
to redirect to while our app is waiting for data.
ひとつひとつ見ていきましょう。
最初に、loading template（これからすぐに作ります。）の名前をルーターに与えるために、私たちは Router.configure() ブロックを修正しました。
loading template はアプリがデータを待っている間にリダイレクトを行います。

Second, we've also added a waitOn function, which returns our posts subscription.
Finally, we enabled a built in loading hook. 
What this means is that the router will ensure 
that the posts subscription is loaded 
before sending the user through to the route they requested.
次に、posts サブスクリプションを返す waitOn関数を加えました。
最後に、私たちはローディングフックを作りました。
これはユーザーがリクエストしたルートにユーザーを送る前に、
ルーターが posts サブスクリプションを読み込むようにします。

Note that since we're defining our waitOn function globally at the router level,
this sequence will only happen once when a user first accesses your app. 
After that, the data will already be loaded in the browser's memory and the router won't need to wait for it again.
私たちは waitOn関数をルーターレベルでグローバルに定義しているので、
このシーケンスはユーザーが初めてアプリにアクセスした際に一度だけ起こります。
その後、このデータはブラウザーのメモリにすでに読み込まれ、ルーターは再び待つ必要がなくなります。

And since we are now letting the router handle our subscription, 
you can now safely remove it from main.js (which should now be empty).
これでルーターがサブスクリプションを処理するようにしたので、
main.js のコードを安全に削除することができます。（main.js は現在何も入っていない状態です。）

It's usually a good idea to wait on your subscriptions, not just for the user experience, 
but also because it means you can safely assume that data will always be available from within a template. 
This eliminates the need to deal with templates being rendered before their underlying data is available,
which often requires tricky workarounds.
サブスクリプションを待つことは良いアイデアです。それは単にユーザーエクスペリエンスのためだけではなく、データが常にテンプレート内から利用できると問題なく想定できるからです。
基礎的な情報を利用する前に、レンダリングしたテンプレートを処理する必要がなくなります。
そうするにはたいて巧妙な回避方法が必要です。

We'll also add an onBeforeAction filter to trigger Iron Router's built-in loading hook 
and make sure we're showing the loading template while we wait.
 また、onBeforeAction フィルターを加えて、Iron Router に組み込まれた loading フックを動作させます。
 そして、データを待っている間に loading テンプレートを表示するようにします。

The final piece of the puzzle is the actual loading template. 
We'll use the spin package to create a nice animated loading spinner. 
Add it with meteor add sachag:spin, and then create the loading template as follows:
パズルの最後のピースは実際に読み込むテンプレートです。
ナイスなローディングスピナーのアニメーションを作るために、spin パッケージを使います。
meteor add sacha:spin で spin を追加して、loading テンプレートを次のように作ります。

~~~html
<template name="loading">
  {{>spinner}}
</template>
~~~
<%= caption "client/views/includes/loading.html" %>

Note that {{>spinner}} is a partial contained in the spin package.
Even though this partial comes from “outside” our app, we can include it just like any other template.
{{>spinner}} は spin パッケージに含まれている部分です。
この部分はアプリの「外側」から来ているわけですが、通常のテンプレートと同様にインクルードすることができます。

<%= commit "5-2", "Wait on the post subscription." %>

<% note do %>

### A First Glance At Reactivity

Reactivity is a core part of Meteor, and although we've yet to really touch on it,
our loading template gives us a first glance at this concept.
　リアクティビリティは Meteor の根幹をなす部分ですが、これまで触れてきませんでした。ローディングテンプレートでこのコンセプトを垣間見ることができます。

Redirecting to a loading template if data isn't loaded yet is all well and good, 
but how does the router know when to redirect the user back to the right page once the data comes through?
　データがロードされていないかどうかローディングテンプレートにリダイレクトすることは良いことですが、ユーザーを正しいページにリダイレクトする時をルーターはどうして分かるのでしょうか。（？？？）　

For now, let's just say that this is exactly where reactivity comes in, and leave it at this.
But don't worry, you'll learn more about it very soon!
今のところはとりあえずリアクティビリティがその役割をしているとだけ言っておきましょう。
このことについてはこの後すぐに学びますので、心配ご無用です！

<% end %>

###　特定の投稿にルーティングする

Now that we've seen how to route to the postsList template,
let's set up a route to display the details of a single post.
ここまでで、どのように postsList テンプレートにルーティングするのか見てきました。
ここでは１つ１つの投稿の詳細を表示するためのルートをセットアップしましょう。

There's just one catch: we can't go ahead and define one route per post, since there might be hundreds of them.
So we'll need to set up a single dynamic route, and make that route display any post we want.
（There's just one catch？）：１つの投稿ごとにルートの定義をするとなると、数百の投稿に対して同じことをすることになり、先に進めなくなってしまいます。
そのため、１つの動的なルートをセットアップして、ルートに私たちが見たい投稿を表示させる必要があります。

To start with, 
we'll create a new template that simply renders the same post template 
that we used earlier in the list of posts.
まず初めに、同じ投稿テンプレートを単純にレンダリングするだけの新しいテンプレートを作ります。これは私たちが投稿をリストにする時に以前使ったテンプレートです。

~~~html
<template name="postPage">
  {{> postItem}}
</template>
~~~
<%= caption "client/views/posts/post_page.html" %>

We'll add more elements to this template later on (such as comments),
but for now it'll simply serve as a shell for our {{> postItem}} include.
後でこのテンプレートにはコメントなどの要素を入れていきますが、今のところ {{> postItem}} インクルードのシェルのような役目を果たしています。

We are going to create another named route,
this time mapping URL paths of the form /posts/<ID> to the postPage template:
また違う名前でルートを作っていきましょう。
今回は、/posts/<ID> の形で URL パスを postPage テンプレートに割り当てます。

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id'
  });
});

~~~
<%= caption "lib/router.js" %>
<%= highlight "4~6" %>

The special :_id syntax tells the router two things:
first, to match any route of the form /posts/xyz/, where “xyz” can be anything at all.
Second, to put whatever it finds in this “xyz” spot inside an _id property in the router's params array.
この特別な :_id 構文はルーターに２つのことを命令しています：
１つは、/posts/xyz/ の形のルートをマッチさせます。/posts/xyz/ の “xyz” はどんなものでも問題ありません。
２つは、ルーターの params配列で _id プロパティ内の “xyz” 地点を見つけたものはどんなものでも中に入れます。

Note that we're only using _id for convenience's sake here. 
The router has no way of knowing if you're passing it an actual _id, or just some random string of characters.
 ここでは便宜上のために _id だけを使っていることに留意してください。
 このルーターはあなたが実際の _id を渡しているのか、ランダムの文字列を渡しているのか判断することはできません。

We're now routing to the correct template, but we're still missing something: 
the router knows the _id of the post we'd like to display,
but the template still has no clue. So how do we bridge that gap?
私たちは今、正しいテンプレートにルーティングしていますが、まだ何か見逃しています：
ルーターは私たちが表示したい投稿の _id を識別しますが、テンプレートはまだ何もわからない状態です。
では、どのようにしてこのギャップを埋めるのでしょうか。

Thankfully, the router has a clever built-in solution: 
it lets you specify a template's data context. 
You can think of the data context as the filling inside a delicious cake made of templates and layouts. 
Simply put, it's what you fill up your template with:
ありがたいことに、このルーターには組み込まれた解決策があります：
ルーターは、テンプレートのデータ内容を特定できます。
これはテンプレートとレイアウトで作られたおいしいケーキの中をデータコンテキストが満たしていると考えることができます。
簡単に言うと、 テンプレートの中をいっぱいに満たしているものがデータコンテキストです。

<%= diagram "router-diagram-2", "データコンテキスト", "pull-center" %>

In our case, we can get the proper data context by looking for our post based on the _id we got from the URL:
この場合、私たちは URL から得た _id を基にした投稿を探して正しいデータコンテキストを取得しています。

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
});

~~~
<%= caption "lib/router.js" %>
<%= highlight "4~7" %>

So every time a user accesses this route, 
we'll find the appropriate post and pass it to the template.
Remember that findOne returns a single post that matches a query, 
and that providing just an id as an argument is a shorthand for {_id: id}.
そのため、ユーザーがこのルートにアクセスするたびに、
私たちは適切な投稿を見つけて,その情報をテンプレートに引き渡しています。
findOne がクエリにマッチした１つの投稿を返して、id が {_id: id} を略した表現であることを思い出しましょう。


Within the data function for a route, this corresponds to the currently matched route, 
and we can use this.params to access the named parts of the route 
(which we indicated by prefixing them with : inside our path).
ルートの data関数内で、this は現在マッチしているルートに対応しています。
私たちは名前がついたルートの部分にアクセスするために this.params を使うことができます。
（そのことを、私たちは path の中で：を前に置くことで表現しています。）（？？？）

<% note do %>

### More About Data Contexts

By setting a template's data context, you can control the value of this inside template helpers.
テンプレートのデータコンテキストを設定することで、テンプレートヘルパー内の this の値をコントロールすることができます。

This is usually done implicitly with the {{#each}} iterator, 
which automatically sets the data context of each iteration to the item currently being iterated on:
これは {{#each}} イテレータで非明示的に処理されます。
 {{#each}} イテレータは　自動的に現在繰り返し処理されている（item？）それぞれに繰り返し処理のデータコンテキストを設定します。 　
~~~html
{{#each widgets}}
  {{> widgetItem}}
{{/each}}
~~~

But we can also do it explicitly using {{#with}}, 
which simply says "take this object, and apply the following template to it". 
For example, we can write:
しかし、{{#with}} を使うことで同じことを明示的に行うことができます。
{{#with}} は単純に「このオブジェクトを取ってきて、次のテンプレートにそれを適用しろ」と命令しています。
例えば、このように書くことができます。

~~~html
{{#with myWidget}}
  {{> widgetPage}}
{{/with}}
~~~

It turns out you can achieve the same result by passing the context as an argument to the template call. 
So the previous block of code can be rewritten as:
テンプレートの（ call＝呼び出し？）に、コンテキストを引数として引き渡すことで　同じ結果を得ることができることがわかります。　
そのため先ほどのコードのブロックはこのように書きなおすことができます：

~~~js
{{> widgetPage myWidget}}
~~~

<% end %>

### Using a Dynamic Named Route Helper　動的に指定したルートヘルパーを使う

Finally, we need to make sure that we're pointing to the right place whenever we want to link to an individual post.
Again, we could do something like <a href="/posts/{{_id}}">, but using a route helper is just more reliable.
最終的に、私たちは個別の投稿にリンクをしたい時は常に正しい場所を指し示す必要があります。（？？？）
再び、私たちは　<a href="/posts/{{_id}}"> のようにすることができますが、ルートヘルパーを使った方がより確実です。

We've named the post route postPage, so we can use a {{pathFor 'postPage'}} helper:
私たちは投稿ルートを postPage と指定したので、{{pathFor 'postPage'}} ヘルパーを使います。

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html"%>
<%= highlight "6" %>
<%= commit "5-3", "Routing to a single post page." %>

But wait, how exactly does the router know where to get the xyz part in /posts/xyz?
After all, we're not passing it any _id.
でも待ってください。　/posts/xyz の中のどこで xyz 部分を得るのか（？？？）ルーターはどれだけ正確に判断するのでしょうか。
結局、私たちはルーターに全く _id を引き渡していません。

It turns out that Iron Router is smart enough to figure it out by itself. 
We're telling the router to use the postPage route,
and the router knows that this route requires an _id of some kind (since that's how we defined our path) .
結局のところ、Iron Router は自分自身でそれを判断できるほどスマートだということです。
私たちはルーターに　postPage ルートを使うように命令しています。　
ルーターはルートがどこの_id を要求するのか識別します。　（そのため、私たちはpath を定義しました。）

So the router will look for this _id in the most logical place available: 
the data context of the {{pathFor 'postPage'}} helper, in other words this. 
And it so happens that our this corresponds to a post, which (surprise!) does possess an _id property.
そのため、ルーターは最もロジカルな場所で利用できる _id を探します：
{{pathFor 'postPage'}} ヘルパーのデータコンテキスト、つまりは this です。
this は投稿に対応するため、（驚くことに！） _id プロパティを（possess＝内包しています？）。

Alternatively, you can also explicitely tell the router where you'd like it to look for the _id property, 
by passing a second argument to the helper (i.e. {{pathFor 'postPage' someOtherPost}}).
A practical use of this pattern would be getting the link to the previous or next posts in a list, for example.
その代わりに、ヘルパーに２つの引数を渡すことで（つまり、 {{pathFor 'postPage' someOtherPost}}として）
ルーターがどこで_idプ ロパティを探したいかを間接的に命令することもできます。（？？？）
たとえば、このパターンの実践的な使い方は 一覧表の投稿の前や次のリンクをと取得することでしょう。

To see if it works correctly,
browse to the post list and click on one of the 'Discuss' links. You should see something like this:
　正しく動作しているか確かめるために、
　投稿リストをブラウザで開いてて、'Discuss' ボタンをクリックしましょう。
　きっとこのように表示されるはずです。

<%= screenshot "5-2", "A single post page." %>

<% note do %>

### HTML5 pushState

One thing to realise is that these URL changes are happening using HTML5 pushState.
（realise ？）するための１つは、URL の変化は HTML5 の pushState を使うことで起こっています。

The Router picks up clicks on URLs that are internal to the site,
and prevents the browser from browsing away from the app, 
instead just making the necessary changes to the app's state.
ルーターは　サイト内のURL　クリックを取得して、
ブラウザーがアプリから（browsing away ？）することを防ぎます。
その代わりに、アプリの状態の変化　　必要性　（？？？）

If everything is working correctly the page should change instantaneously. 
In fact, sometimes things change so fast that some kind of page transition might be needed. 
This is outside of the scope of this chapter, but an interesting topic nonetheless.
もしすべてが正しく動いているなら、ページは瞬時に変化します。
実際には、変化するのが早過ぎるため、ある種のページ移行が必要になります。
これはこの章の範囲外のことですが、面白いトピックです。

<% end %>
　
