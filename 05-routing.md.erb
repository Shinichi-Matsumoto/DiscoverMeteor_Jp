---
title: Routing
slug: routing
date: 0005/01/01
number: 5
contents: Meteorでのルーティングを学びます。.| ユニークなURLで投稿ディスカッションページを作ります。（？？？）|どうやって適切にURLをリンクするのか学習します。
paragraphs: 72
---

Now that we have a list of posts (which will eventually be user-submitted),
今のところ、投稿の一覧表があります（最終的にはユーザーが投稿するようにします）
we need an individual post page where our users will be able to discuss each post.
　ユーザーがお互いの投稿を議論できるように個別の投稿ページが必要です。（？？？）

We'd like these pages to be accessible via a permalink, 
このページをパーマリンクを通じて、　アクセスできるようにしたい　
a URL of the form http://myapp.com/posts/xyz (where xyz is a MongoDB _id identifier) that is unique to each post.
パーマリンクとはhttp://myapp.com/posts/xyz の形をしたURLで、 それぞれの投稿を独自のものにします（？？？）　　（xyzの部分はMongoDBの_id識別子です）

This means we'll need some kind of routing to look at what's inside the browser's URL bar
これは　　ブラウザーのURLバーの中に何があるのか調べてそれに応じて正しい中身を表示する何らかのルーティングが必要であるということです
and display the right content accordingly.


### Iron Routerパッケージを入れる

Iron Router is a routing package that was conceived specifically for Meteor apps.
Iron Router 特にMeteorアプリでのルーティングのパッケージです。

Not only does it help with routing (setting up paths), 
Iron Routerはルーティング（パスの設定）に役立つだけではなく、
but it can also take care of filters (assigning actions to some of these paths) 
パスに処理を割り当てるフィルターも処理します。
and even manage subscriptions (control which path has access to what data).
また、どのパスがどんなデータにアクセスするのか制御するサブスクリプションも　操ります（？？？）　

(Note: Iron Router was developed in part by Discover Meteor co-author Tom Coleman.)

First, let's install the package from Atmosphere:
最初に、Atmosphereからパッケージをインストールしましょう。

~~~bash
$ mrt add iron-router
~~~
<%= caption "Terminal" %>

This command downloads and installs the iron-router package into our app, ready to use. 
このコマンドでiron-routerパッケージをアプリにインストールします。　すぐ使える（？？？）
Note that you might sometimes need to restart your Meteor app 
パッケージを使う前にMeteorアプリを再起動する必要があるかもしれません　（？？？）
(with ctrl+c to kill the process, then meteor to start it again) before a package can be used.
（ctrl+cでプロセスを中止して、再び起動するためにmeteorを入力します。）

Note that the Iron Router is a third-party package,
Iron Routerはサードパーティのパッケージですので、
meaning that you'll need Meteorite to install it (meteor add iron-router won't work).
インストールするにはMeteoriteが必要です。(meteor add iron-router ではインストールできません).

<% note do %>

### Router Vocabulary　ルーティング用語集

We'll be touching on a lot of different features of the router in this chapter. 
この章で、る
If you have some experience with a framework such as Rails, 
you'll already be familiar with most of these concepts.
But if not, here's a quick glossary to bring you up to speed

- ////
- ////
- ////
- ////
- ////
- ////
- ////
- ////

////

<% end %>

### Routing: Mapping URLs To Templates

////

////

////

<%= diagram "router-diagram", "Layouts and templates.", "pull-center" %>

////

////

~~~html
<head>
  <title>Microscope</title>
</head>
~~~
<%= caption "client/main.html" %>

////

~~~html
<template name="layout">
  <div class="container">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="brand" href="/">Microscope</a>
    </div>
  </header>
  <div id="main" class="row-fluid">
    {{yield}}
  </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>

////

////

~~~js
Router.configure({
  layoutTemplate: 'layout'
});

Router.map(function() {
  this.route('postsList', {path: '/'});
});
~~~
<%= caption "lib/router.js"%>

////

<% note do %>

### The `/lib` folder

////

////

<% end %>

### Named Routes

////

////

////

////

~~~html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
  </div>
</header>

//...
~~~
<%= caption "client/views/application/layout.html"%>
<%= highlight "3" %>

<%= commit "5-1", "Very basic routing." %>

### Waiting on Data

////

////

////

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.map(function() {
  this.route('postsList', {path: '/'});
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "3,4" %>

////

////

////

////

////

////

~~~html
<template name="loading">
  {{>spinner}}
</template>
~~~
<%= caption "client/views/includes/loading.html" %>

////

<%= commit "5-2", "Wait on the post subscription." %>

<% note do %>

### A First Glance At Reactivity

////

////

////

<% end %>

### Routing To A Specific Post

////

////

////

~~~html
<template name="postPage">
  {{> postItem}}
</template>
~~~
<%= caption "client/views/posts/post_page.html" %>

////

////

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id'
  });
});

~~~
<%= caption "lib/router.js" %>
<%= highlight "4~6" %>

////

////

////

////

<%= diagram "router-diagram-2", "The data context.", "pull-center" %>

////

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
});

~~~
<%= caption "lib/router.js" %>
<%= highlight "4~7" %>

////

////

<% note do %>

### More About Data Contexts

////

////

~~~html
{{#each widgets}}
  {{> widgetItem}}
{{/each}}
~~~

////

~~~html
{{#with myWidget}}
  {{> widgetPage}}
{{/with}}
~~~

////

~~~js
{{> widgetPage myWidget}}
~~~

<% end %>

### Using a Dynamic Named Route Helper

////

////

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html"%>
<%= highlight "6" %>
<%= commit "5-3", "Routing to a single post page." %>

////

////

////

////

////

<%= screenshot "5-2", "A single post page." %>

<% note do %>

### HTML5 pushState

////

////

////

<% end %>
