---
title: Templates
slug: templates
date: 0003/01/01
number: 3
contents: Learn about Meteor's templating language, Handlebars.|Create your first three templates.|Learn how Meteor managers work.|Get a basic prototype working with static data.
paragraphs: 46
---

To ease into Meteor development, we'll adopt an outside-in approach. 
In other words we'll build a "dumb" HTML/JavaScript outer shell first, 
and then hook it up to our app's inner workings later on.
　Meteorでの開発を簡単にするため、私たちはアウトサイドインアプローチを用いることになります。
　要するに、私たちは最初に（"dumb"？）なHTMLとJavaScriptで外側の骨組みを作り、
　それから後でアプリが内側で動くように繋いでいきます。

This means that in this chapter we'll only concern ourselves with what's happening inside the /client directory.
　つまり、この章では /clientディレクトリの内側で何が起きるのか懸念するだけとなります。

Let's create a new file named main.html inside our /client directory, and fill it with the following code:
　では、/clientディレクトリの中に main.htmlという新しいファイルを作って、次のようなコードを書き込みましょう：

~~~html
<head>
  <title>Microscope</title>
</head>
<body>
  <div class="container">
    <header class="navbar">
      <div class="navbar-inner">
        <a class="brand" href="/">Microscope</a>
      </div>
    </header>
    <div id="main" class="row-fluid">
      {{> postsList}}
    </div>
  </div>
</body>
~~~
<%= caption "client/main.html" %>

This will be our main app template. 
As you can see it's all HTML except for a single {{> postsList}} tag, 
which is an insertion point for the postsList template as we'll soon see. 
For now, let's create a couple more templates.
　これは（main app template？）となります。
　ご覧のように、{{> postsList}}タグ以外はすべてHTMLです。
　{{> postsList}}タグは、これから見ていくpostsListテンプレートの挿入場所となります。
　では、いくつかテンプレートを作っていきましょう。

### Meteorテンプレート

At its core, a social news site is composed of posts organized in lists,
and that's exactly how we'll organize our templates.
　根本的には、ソーシャルニュースサイトは一覧表となった投稿によって構成されています。
　私たちはまさにそうなるようにテンプレートを作っていきす。

Let's create a /views directory inside /client. 
This will be where we put all our templates, 
and to keep things tidy we'll also create /posts inside /views just for our post-related templates.
　では、/clientの中に/viewsディレクトリを作りましょう。
　私たちは/viewsディレクトリの中にすべてのテンプレートを置くことになります。
　/viewsディレクトリ内を整理したいので、投稿に関連したテンプレートのために、/views内に/postsを作ります。（？？？）
 

<% note do %>

### ファイルを見つける

Meteor is great at finding files.
No matter where you put your code in the /client directory, Meteor will find it and compile it properly.
This means you never need to manually write include paths for JavaScript or CSS files.
　Meteorはファイルを見つけることが得意です。
　/clientディレクトリ内のどこにコードを入れようと、Meteorはコードを見つけてきて正確にコンパイルします。
　つまり、JavaScriptやCSSへのインクルードパスを手で書く必要がありません。

It also means you could very well put all your files in the same directory, 
or even all your code in the same file.
But since Meteor will compile everything to a single minified file anyway,
we'd rather keep things well-organized and use a cleaner file structure.
　また、同じディレクトリにすべてのファイルを置くことができるということでもあります。
　さらには、同じファイルにすべてのコードを置くこともできます。
　しかし、Meteorはすべてのコードを小さくした１つのファイルにコンパイルしてしまうので、
　ファイル内をきちんと整理して、きれいなファイル構造にすると良いでしょう。

<% end %>

We're finally ready to create our second template.
Inside client/views/posts, create posts_list.html:
　これから２つのテンプレートを作っていきます。
　client/views/postsの中にposts_list.htmlを作ります。

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>

And post_item.html:
　次にpost_item.htmlを作ります。

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html" %>

Note the name="postsList" attribute of the template element.
This is the name that will be used by Meteor to keep track of what template goes where.
　テンプレート要素の name="postsList"属性を書き込みます。
　これはどのテンプレートがどこに行くのか　（ keep track of？）するために、Meteorで使われている（ name？）です。

It's time to introduce Meteor's templating system, Spacebars. 
Spacebars is simply HTML, with the addition of three things: partials, expressions and block helpers.
　ここでMeteorのテンプレートシステム、Spacebarsについて紹介します。
　SpacebarsではHTMLに３つのものを付け加えます：partialsとexpressionsとblock helpersです。

Partials use the {{> templateName}} syntax, 
and simply tell Meteor to replace the partial with the template of the same name (in our case postItem).
　Partialsでは{{> templateName}}構文を使い、
　partialを同じ名前（ここではpostItem）のテンプレートに置き換えるようMeteorに命令します。
　

Expressions such as {{title}} either call a property of the current object, 
or the return value of a template helper as defined in the current template's manager (more on this later).
　{{title}}のようなExpressionsは、カレントオブジェクトのプロパティを呼び出すか、
　テンプレートマージャーで定義されている　テンプレートヘルパーの値を返します。（そのことについては後で述べます。）

Finally, block helpers are special tags that control the flow of the template, 
such as {{#each}}…{{/each}} or {{#if}}…{{/if}}.
　最後に、block helpersはテンプレートのフローを制御する特別なタグで、
　たとえば、{{#each}}…{{/each}} や {{#if}}…{{/if}}があります。

<% note do %>

### Going Further

もしSpacebarsについてさらに学びたいという場合は、 Spacebars documentationを参照することができます。

<% end %>

この知識があると、ここでどんなことが起こっているのか簡単に理解することができます。

最初にpostsListテンプレートの中で、{{#each}}…{{/each}} block helperを使ってpostsオブジェクトに繰り返し処理を行っています。

postsオブジェクトがどこからやって来たのでしょうか？
それは実際のところ、テンプレートヘルパーから

////

////

### Template Managers

ここまでSpacebarsについて取り組んできました。
Spacebarsはいくつかのタグを散りばめたHTMLです。
PHPのような他の言語と違い、Meteorがテンプレートと他のロジックを分離した状態にします。
テンプレートそれ自体が分離させるわけではありません。

（？？？）　ためには、テンプレートにマネージャーが必要です。
　このマネージャーは　生の食材（データ）をとってきて準備をするシェフのようなものと見なすことができます。
（？？？）

言い換えれば、テンプレートの役割は表示をすることと変数をループすることに限定されます。
マネージャーが　値を変数に割り当て　（？？？）

<% note do %>

### Managers?

私たちがMeteor開発者たちにテンプレートマネージャーを何と呼んでいるのか聞いて回ったところ、
半分の人が「コントローラー」だと言い、もう半分の人は「JavaScriptのコードを置くファイル」だと言いました。

実際のところ、マネージャーはコントローラーではありません。
少なくともMVCでの意味のコントローラーではありません。
「JavaScriptのコードを置くファイル」と呼ぶのも受けが良さそうではありません。
そのため、どちらの意見も却下しました。

私たちは何と呼べばよいのかを決めたかったため、「マネージャー」という言葉を考えだしました。
webフレームワークに関係したことでマネージャーという言葉は（？？？）　以前から存在する意味ではありませんでした。

<% end %>

  .js拡張子　（？？？）
  では早速　/client/views/postsの中にposts_list.jsを作って、最初のマネージャーを作っていきましょう。

~~~js
var postsData = [
  {
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  }, 
  {
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  }, 
  {
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  }
];
Template.postsList.helpers({
  posts: postsData
});
~~~
<%= caption "client/views/posts/posts_list.js" %>

正しくできたなら、ブラウザでは次のように表示されているでしょう。

<%= screenshot "3-1", "Our first templates with static data" %>

<%= commit "3-1", "Added basic posts list template and static data." %>

私たちはここで２つのことをしています。
まず１つ目に　postsData配列の中にダミープロトタイプデータを構成しています。
通常、データはデータベースからやって来ます。
この点は次の章で学びますので、静的データを使って「ごまかして」います。

２つ目に postsをテンプレートヘルパーに定義するため、Meteorの Template.myTemplate.helpers()関数を使っています。
postsは、postsData配列を返します。

postsヘルパーを定義するということは、テンプレートでも使うことができるということです。

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>

そのため、このテンプレートではpostsData配列を繰り返し処理ができる　　postItemテンプレート内で　（？？？）

### "this"の値

私たちは今post_item.jsマネージャーを作りました。

~~~js
Template.postItem.helpers({
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  }
});
~~~
<%= caption "client/views/posts/post_item.js" %>

<%= commit "3-2", "Setup a `domain` helper on the `postItem`." %>

今回のdomainヘルパーの値は配列ではなく、無名関数です。
このパターンは先ほどのダミーデータの例と比べて、より一般的で役立ちます。


<%= screenshot "3-2", "それぞれのリンクにドメインを表示する" %>

domainヘルパーはURLを取ってきて、ちょっとしたJavaScriptのマジックによってドメインを返します。
ですが、そもそもURLはどこから取ってきたのでしょうか？

この疑問に答えるには、 posts_list.htmlテンプレートまで戻る必要があります。
{{#each}}ブロックヘルパーは配列を繰り返し処理するだけではありません。
ブロックの中のthisの値を繰り返し処理されたオブジェクトに設定するのです。

////（？？？）

ここまでで、なぜthis.urlがpostのURLを返すのか理解できるでしょう。
また、post_item.html テンプレートの中の{{title}} と {{url}}を使う場合、　
Meteorはそれがthis.titleとthis.urlであることを認識し、正しい値を返します。

<% note do %>

### JavaScriptマジック

Meteorに限ったことではないのですが、ここで先ほどの「JavaScriptマジック」について解説しましょう。
まず、HTMLで空のアンカー要素(a)を作り、メモリに記憶します。

その時に　 postのURLと等しくなるようにhref属性を設定しています。
（このように、ヘルパーにおいて　this　は現在動作しているオブジェクトのことです。）・・・（？？？）

最後に、　　残りのURLがなくてもリンクのドメイン名を返すので、a要素のhostnameプロパティを使用しています。

<% end %>

ここまで理解ができたら、ブラウザでpostのリストを見ることができるでしょう。
そのリストは単なる静的データです。
そのため、まだMeteorのリアルタイムに関する特徴ついて使っていません。
次の章ではその点について見て行きましょう！

<% note do %>

### Hot Code Reload　・・（？？？）

ファイルを変えた際に手動でブラウザをリロードをする必要がないことにお気づきでしょうか。


これはMeteorがプロジェクトディレクトリ内で全てのファイルを読み込み、変更点を見つけると自動的にブラウザを更新するためです。

Meteorのホットコードリロードはとてもスマートであり、  アプリの状態を保存する　（？？？）

<% end %>
